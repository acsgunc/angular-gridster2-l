{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./dist/angular-gridster2/__ivy_ngcc__/fesm2015/angular-gridster2.js","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/sections/api/api.component.ts","./src/app/sections/api/api.component.html","./src/app/sections/compact/compact.component.ts","./src/app/sections/compact/compact.component.html","./src/app/sections/displayGrid/displayGrid.component.ts","./src/app/sections/displayGrid/displayGrid.component.html","./src/app/sections/drag/drag.component.ts","./src/app/sections/drag/drag.component.html","./src/app/sections/dynamicWidgets/dynamicWidgets.component.ts","./src/app/sections/dynamicWidgets/dynamicWidgets.component.html","./src/app/sections/dynamicWidgets/parentDynamic.component.ts","./src/app/sections/dynamicWidgets/parentDynamic.component.html","./src/app/sections/dynamicWidgets/widgetA.component.ts","./src/app/sections/dynamicWidgets/widgetB.component.ts","./src/app/sections/dynamicWidgets/widgetC.component.ts","./src/app/sections/emptyCell/emptyCell.component.ts","./src/app/sections/emptyCell/emptyCell.component.html","./src/app/sections/gridEvents/gridEvents.component.ts","./src/app/sections/gridEvents/gridEvents.component.html","./src/app/sections/gridMargins/gridMargins.component.ts","./src/app/sections/gridMargins/gridMargins.component.html","./src/app/sections/gridSizes/gridSizes.component.ts","./src/app/sections/gridSizes/gridSizes.component.html","./src/app/sections/gridTypes/gridTypes.component.ts","./src/app/sections/gridTypes/gridTypes.component.html","./src/app/sections/home/home.component.ts","./src/app/sections/home/home.component.html","./src/app/sections/items/items.component.ts","./src/app/sections/items/items.component.html","./src/app/sections/misc/misc.component.ts","./src/app/sections/misc/misc.component.html","./src/app/sections/multiLayer/multi-layer.component.ts","./src/app/sections/multiLayer/multi-layer.component.html","./src/app/sections/push/push.component.ts","./src/app/sections/push/push.component.html","./src/app/sections/resize/resize.component.ts","./src/app/sections/resize/resize.component.html","./src/app/sections/rtl/rtl.component.ts","./src/app/sections/rtl/rtl.component.html","./src/app/sections/swap/swap.component.ts","./src/app/sections/swap/swap.component.html","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,mCAAmC,sDAAe,8BAA8B;AAC5I,wBAAwB,gEAAyB,EAAE,wDAAwD;AAC3G;AACA,KAAK;AACL;AACA,kBAAkB,wDAAU,GAAG,wDAAU;AACzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,qBAAqB,mDAAmD;AACxwDAAwD,mCAAmC;AAC3F,sBAAsB,gEAAyB,EAAE,oDAAoD;;AAErG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,qCAAqC,sDAAe,8BAA8B;AAClJ,0BAA0B,gEAAyB,EAAE,4DAA4D;AACjH;AACA,KAAK;AACL;AACA,oBAAoB,wDAAU,GAAG,wyDAAyD,qLAAqL;AAC3R;AACA;AACA,6CAA6C,yDAAyD,wLAAwL;AAC9R;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,oCAAoC,sDAAe,8BAA8B;AAC/I,yBAAyB,gEAAyB,EAAE,0DAA0D;AAC9G;AACA,KAAK;AACL;AACA,mBAAmB,wDAAU,GAAG,wDAAU;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,uBAAuB;AACrC;AACA;AACA,kBAAkB,0BAA0B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,qCAAqC,+DAAwB,CAAC,wDAAU,GAAG,+DAAwB,CAAC,uDAAS,GAAG,+DAAwB,CAAC,+DAAiB,GAAG,+DAAwB,CAAC,oDAAM,GAAG;AAC/P,yBAAyB,+DAAwB,EAAE,8DAA8D,qBAAqB,aAAa,kEAA2B,sVAAsV;AACpgB,QAAQ,6DAAsB;AAC9B,QAAQ,wDAAiB;AACzB,QAAQ,wDAAiB;AACzB,QAAQ,0DAAmB;AAC3B,QAAQ,uDAAgB;AACxB,KAAK;AACL,QAAQ,wDAAiB;AACzB,QAAQ,uDAAgB;AACxB,QAAQ,wDAAiB;AACzB,KAAK,EAAE,2BAA2B,SAAS,uDAAc,4BAA4B,uDAAc,EAAE,EAAE,qBAAqB,kBAAkB,sBAAsB,gBAAgB,WAAW,YAAY,yBAAyB,sBAAsB,qBAAqB,iBAAiB,cAAc,aAAa,kBAAkB,kBAAkB,wBAAwB,kBAAkB,gBAAgB,0BAA0B,gBAAgB,kBAAkB,eAAe,cAAc,gBAAgB,kBAAkB,gBAAgB,8BAA8B,kBAAkB,iDAAiD,kBAAkB,aAAa,eAAe,sBAAsB,2EAA2E,cAAc,0BAA0B,2BAA2B,4BAA4B,uBAAuB,0BAA0B,6BAA6B,sBAAsB;AACv9B;AACA,KAAK,OAAO,wDAAU,gBAAgB,OAAO,oDAAM,SAAS,wDAAU,IAAI,GAAG;AAC7E,KAAK,OAAO,uDAAS,gBAAgB,OAAO,oDAAM,SAAS,uDAAS,IAAI,GAAG;AAC3E,KAAK,OAAO,+DAAiB,gBAAgB,OAAO,oDAAM,SAAS,+DAAiB,IAAI,GAAG;AAC3F,KAAK,OAAO,oDAAM,gBAAgB,OAAO,oDAAM,SAAS,oDAAM,IAAI;AAClE;AACA,wDAAU;AACV,IAAI,2DAAK;AACT,IAAI,wDAAU;AACd;AACA,0CAA0C,wDAAU,GAAG,qDAAO,IAAI,4DAAM,CAAC,wDAAU,IAAI,qDAAO,IAAI,4DAAM,CAAC,uDAAS;AAClH,IAAI,qDAAO,IAAI,4DAAM,CAAC,+DAAiB;AACvC,IAAI,qDAAO,IAAI,4DAAM,CAAC,oDAAM;AAC5B,IAAI,wDAAU,uBAAuB,wDAAU,EAAE,uDAAS;AAC1D,QAAQ,+DAAiB;AACzB,QAAQ,oDAAM;AACd;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,mDAAmD;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2DAA2D;AACnG,iBAAiB,mDAAmD;AACpE;AACA;AACA;AACA,0CAA0C,mDAAmD;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,gCAAgC,sDAAe,kCAAkC;AACvI,qBAAqB,gEAAyB,EAAE,kDAAkD;AAClG;AACA,KAAK;AACL;AACA,eAAe,wDAAU,GAAG,wDAAU;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+CAA+C;AAC9E,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+CAA+C;AAC9E,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,gCAAgC,sDAAe,kCAAkC;AACvI,qBAAqB,gEAAyB,EAAE,kDAAkD;AAClG;AACA,KAAK;AACL;AACA,eAAe,wDAAU,GAAG,wDAAU;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qEAAqgCAAgC,6DAA6D;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,qCAAqC,sDAAe,kCAAkC,sDAAe,8BAA8B,sDAAe,CAAC,oDAAa,GAAG;AACnO,0BAA0B,gEAAyB,EAAE,4DAA4D;AACjH;AACA,KAAK,uCAAuC;AAC5C,KAAK,mCAAmC;AACxC,KAAK,OAAO,oDAAM;AAClB;AACA,oBAAoB,wDAAU,GAAG,wDAAU,mFAAmF,oDAAM;AACpI;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,sCAAsC,sDAAe,kCAAkC;AACzJ,2BAA2B,gEAAyB,EAAE,8DAA8D;AACpH;AACA,KAAK;AACL;AACA,qBAAqB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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { __decorate, __metadata, __param } from 'tslib';\nimport { Injectable, ElementRef, Inject, Renderer2, ChangeDetectorRef, NgZone, Input, Component, ViewEncapsulation, HostBinding, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction GridsterComponent_div_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 3);\n} if (rf & 2) {\n    const i_r3 = ctx.index;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ctx_r0.gridRenderer.getGridColumnStyle(i_r3));\n} }\nfunction GridsterComponent_div_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 4);\n} if (rf & 2) {\n    const i_r5 = ctx.index;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ctx_r1.gridRenderer.getGridRowStyle(i_r5));\n} }\nconst _c0 = [\"*\"];\nfunction GridsterItemComponent_div_1_Template(rf, ctx) { if (rf & 1) {\n    const _r15 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 8);\n    ɵngcc0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_1_Template_div_mousedown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(); return ctx_r14.resize.dragStartDelay($event); })(\"touchstart\", function GridsterItemComponent_div_1_Template_div_touchstart_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r16 = ɵngcc0.ɵɵnextContext(); return ctx_r16.resize.dragStartDelay($event); });\n    ɵngcc0.ɵɵelementEnd();\n} }\nfunction GridsterItemComponent_div_2_Template(rf, ctx) { if (rf & 1) {\n    const _r18 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 9);\n    ɵngcc0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_2_Template_div_mousedown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r18); const ctx_r17 = ɵngcc0.ɵɵnextContext(); return ctx_r17.resize.dragStartDelay($event); })(\"touchstart\", function GridsterItemComponent_div_2_Template_div_touchstart_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r18); const ctx_r19 = ɵngcc0.ɵɵnextContext(); return ctx_r19.resize.dragStartDelay($event); });\n    ɵngcc0.ɵɵelementEnd();\n} }\nfunction GridsterItemComponent_div_3_Template(rf, ctx) { if (rf & 1) {\n    const _r21 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 10);\n    ɵngcc0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_3_Template_div_mousedown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r21); const ctx_r20 = ɵngcc0.ɵɵnextContext(); return ctx_r20.resize.dragStartDelay($event); })(\"touchstart\", function GridsterItemComponent_div_3_Template_div_touchstart_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r21); const ctx_r22 = ɵngcc0.ɵɵnextContext(); return ctx_r22.resize.dragStartDelay($event); });\n    ɵngcc0.ɵɵelementEnd();\n} }\nfunction GridsterItemComponent_div_4_Template(rf, ctx) { if (rf & 1) {\n    const _r24 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 11);\n    ɵngcc0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_4_Template_div_mousedown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r24); const ctx_r23 = ɵngcc0.ɵɵnextContext(); return ctx_r23.resize.dragStartDelay($event); })(\"touchstart\", function GridsterItemComponent_div_4_Template_div_touchstart_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r24); const ctx_r25 = ɵngcc0.ɵɵnextContext(); return ctx_r25.resize.dragStartDelay($event); });\n    ɵngcc0.ɵɵelementEnd();\n} }\nfunction GridsterItemComponent_div_5_Template(rf, ctx) { if (rf & 1) {\n    const _r27 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12);\n    ɵngcc0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_5_Template_div_mousedown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r27); const ctx_r26 = ɵngcc0.ɵɵnextContext(); return ctx_r26.resize.dragStartDelay($event); })(\"touchstart\", function GridsterItemComponent_div_5_Template_div_touchstart_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r27); const ctx_r28 = ɵngcc0.ɵɵnextContext(); return ctx_r28.resize.dragStartDelay($event); });\n    ɵngcc0.ɵɵelementEnd();\n} }\nfunction GridsterItemComponent_div_6_Template(rf, ctx) { if (rf & 1) {\n    const _r30 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 13);\n    ɵngcc0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_6_Template_div_mousedown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r30); const ctx_r29 = ɵngcc0.ɵɵnextContext(); return ctx_r29.resize.dragStartDelay($event); })(\"touchstart\", function GridsterItemComponent_div_6_Template_div_touchstart_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r30); const ctx_r31 = ɵngcc0.ɵɵnextContext(); return ctx_r31.resize.dragStartDelay($event); });\n    ɵngcc0.ɵɵelementEnd();\n} }\nfunction GridsterItemComponent_div_7_Template(rf, ctx) { if (rf & 1) {\n    const _r33 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 14);\n    ɵngcc0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_7_Template_div_mousedown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r33); const ctx_r32 = ɵngcc0.ɵɵnextContext(); return ctx_r32.resize.dragStartDelay($event); })(\"touchstart\", function GridsterItemComponent_div_7_Template_div_touchstart_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r33); const ctx_r34 = ɵngcc0.ɵɵnextContext(); return ctx_r34.resize.dragStartDelay($event); });\n    ɵngcc0.ɵɵelementEnd();\n} }\nfunction GridsterItemComponent_div_8_Template(rf, ctx) { if (rf & 1) {\n    const _r36 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 15);\n    ɵngcc0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_div_8_Template_div_mousedown_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r36); const ctx_r35 = ɵngcc0.ɵɵnextContext(); return ctx_r35.resize.dragStartDelay($event); })(\"touchstart\", function GridsterItemComponent_div_8_Template_div_touchstart_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r36); const ctx_r37 = ɵngcc0.ɵɵnextContext(); return ctx_r37.resize.dragStartDelay($event); });\n    ɵngcc0.ɵɵelementEnd();\n} }\nclass GridsterComponentInterface {\n}\n\nvar GridType;\n(function (GridType) {\n    GridType[\"Fit\"] = \"fit\";\n    GridType[\"ScrollVertical\"] = \"scrollVertical\";\n    GridType[\"ScrollHorizontal\"] = \"scrollHorizontal\";\n    GridType[\"Fixed\"] = \"fixed\";\n    GridType[\"VerticalFixed\"] = \"verticalFixed\";\n    GridType[\"HorizontalFixed\"] = \"horizontalFixed\";\n})(GridType || (GridType = {}));\nvar DisplayGrid;\n(function (DisplayGrid) {\n    DisplayGrid[\"Always\"] = \"always\";\n    DisplayGrid[\"OnDragAndResize\"] = \"onDrag&Resize\";\n    DisplayGrid[\"None\"] = \"none\";\n})(DisplayGrid || (DisplayGrid = {}));\nvar CompactType;\n(function (CompactType) {\n    CompactType[\"None\"] = \"none\";\n    CompactType[\"CompactUp\"] = \"compactUp\";\n    CompactType[\"CompactLeft\"] = \"compactLeft\";\n    CompactType[\"CompactUpAndLeft\"] = \"compactUp&Left\";\n    CompactType[\"CompactLeftAndUp\"] = \"compactLeft&Up\";\n    CompactType[\"CompactRight\"] = \"compactRight\";\n    CompactType[\"CompactUpAndRight\"] = \"compactUp&Right\";\n    CompactType[\"CompactRightAndUp\"] = \"compactRight&Up\";\n})(CompactType || (CompactType = {}));\nvar DirTypes;\n(function (DirTypes) {\n    DirTypes[\"LTR\"] = \"ltr\";\n    DirTypes[\"RTL\"] = \"rtl\";\n})(DirTypes || (DirTypes = {}));\n\nlet GridsterCompact = class GridsterCompact {\n    constructor(gridster) {\n        this.gridster = gridster;\n    }\n    destroy() {\n        delete this.gridster;\n    }\n    checkCompact() {\n        if (this.gridster.$options.compactType !== CompactType.None) {\n            if (this.gridster.$options.compactType === CompactType.CompactUp) {\n                this.checkCompactUp();\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n                this.checkCompactLeft();\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n                this.checkCompactUp();\n                this.checkCompactLeft();\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n                this.checkCompactLeft();\n                this.checkCompactUp();\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactRight) {\n                this.checkCompactRight();\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\n                this.checkCompactUp();\n                this.checkCompactRight();\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactRightAndUp) {\n                this.checkCompactRight();\n                this.checkCompactUp();\n            }\n        }\n    }\n    checkCompactItem(item) {\n        if (this.gridster.$options.compactType !== CompactType.None) {\n            if (this.gridster.$options.compactType === CompactType.CompactUp) {\n                this.moveUpTillCollision(item);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n                this.moveLeftTillCollision(item);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n                this.moveUpTillCollision(item);\n                this.moveLeftTillCollision(item);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n                this.moveLeftTillCollision(item);\n                this.moveUpTillCollision(item);\n            }\n            else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\n                this.moveUpTillCollision(item);\n                this.moveRightTillCollision(item);\n            }\n        }\n    }\n    checkCompactUp() {\n        let widgetMovedUp = false, widget, moved;\n        const l = this.gridster.grid.length;\n        for (let i = 0; i < l; i++) {\n            widget = this.gridster.grid[i];\n            if (widget.$item.compactEnabled === false) {\n                continue;\n            }\n            moved = this.moveUpTillCollision(widget.$item);\n            if (moved) {\n                widgetMovedUp = true;\n                widget.item.y = widget.$item.y;\n                widget.itemChanged();\n            }\n        }\n        if (widgetMovedUp) {\n            this.checkCompact();\n        }\n    }\n    moveUpTillCollision(item) {\n        item.y -= 1;\n        if (this.gridster.checkCollision(item)) {\n            item.y += 1;\n            return false;\n        }\n        else {\n            this.moveUpTillCollision(item);\n            return true;\n        }\n    }\n    checkCompactLeft() {\n        let widgetMovedUp = false, widget, moved;\n        const l = this.gridster.grid.length;\n        for (let i = 0; i < l; i++) {\n            widget = this.gridster.grid[i];\n            if (widget.$item.compactEnabled === false) {\n                continue;\n            }\n            moved = this.moveLeftTillCollision(widget.$item);\n            if (moved) {\n                widgetMovedUp = true;\n                widget.item.x = widget.$item.x;\n                widget.itemChanged();\n            }\n        }\n        if (widgetMovedUp) {\n            this.checkCompact();\n        }\n    }\n    checkCompactRight() {\n        let widgetMovedUp = false, widget, moved;\n        const l = this.gridster.grid.length;\n        for (let i = 0; i < l; i++) {\n            widget = this.gridster.grid[i];\n            if (widget.$item.compactEnabled === false) {\n                continue;\n            }\n            moved = this.moveRightTillCollision(widget.$item);\n            if (moved) {\n                widgetMovedUp = true;\n                widget.item.x = widget.$item.x;\n                widget.itemChanged();\n            }\n        }\n        if (widgetMovedUp) {\n            this.checkCompact();\n        }\n    }\n    moveLeftTillCollision(item) {\n        item.x -= 1;\n        if (this.gridster.checkCollision(item)) {\n            item.x += 1;\n            return false;\n        }\n        else {\n            this.moveLeftTillCollision(item);\n            return true;\n        }\n    }\n    moveRightTillCollision(item) {\n        item.x += 1;\n        if (this.gridster.checkCollision(item)) {\n            item.x -= 1;\n            return false;\n        }\n        else {\n            this.moveRightTillCollision(item);\n            return true;\n        }\n    }\n};\nGridsterCompact.ɵfac = function GridsterCompact_Factory(t) { return new (t || GridsterCompact)(ɵngcc0.ɵɵinject(GridsterComponentInterface)); };\nGridsterCompact.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GridsterCompact, factory: GridsterCompact.ɵfac });\nGridsterCompact.ctorParameters = () => [\n    { type: GridsterComponentInterface }\n];\nGridsterCompact = __decorate([ __metadata(\"design:paramtypes\", [GridsterComponentInterface])\n], GridsterCompact);\n\nconst GridsterConfigService = {\n    gridType: GridType.Fit,\n    scale: 1,\n    // 'scrollVertical' will fit on width and height of the items will be the same as the width\n    // 'scrollHorizontal' will fit on height and width of the items will be the same as the height\n    // 'fixed' will set the rows and columns dimensions based on fixedColWidth and fixedRowHeight options\n    // 'verticalFixed' will set the rows to fixedRowHeight and columns width will fit the space available\n    // 'horizontalFixed' will set the columns to fixedColWidth and rows height will fit the space available\n    fixedColWidth: 250,\n    fixedRowHeight: 250,\n    keepFixedHeightInMobile: false,\n    keepFixedWidthInMobile: false,\n    setGridSize: false,\n    compactType: CompactType.None,\n    mobileBreakpoint: 640,\n    allowMultiLayer: false,\n    defaultLayerIndex: 0,\n    maxLayerIndex: 2,\n    baseLayerIndex: 1,\n    minCols: 1,\n    maxCols: 100,\n    minRows: 1,\n    maxRows: 100,\n    defaultItemCols: 1,\n    defaultItemRows: 1,\n    maxItemCols: 50,\n    maxItemRows: 50,\n    minItemCols: 1,\n    minItemRows: 1,\n    minItemArea: 1,\n    maxItemArea: 2500,\n    margin: 10,\n    outerMargin: true,\n    outerMarginTop: null,\n    outerMarginRight: null,\n    outerMarginBottom: null,\n    outerMarginLeft: null,\n    useTransformPositioning: true,\n    scrollSensitivity: 10,\n    scrollSpeed: 20,\n    initCallback: undefined,\n    destroyCallback: undefined,\n    gridSizeChangedCallback: undefined,\n    itemChangeCallback: undefined,\n    // Arguments: gridsterItem, gridsterItemComponent\n    itemResizeCallback: undefined,\n    // Arguments: gridsterItem, gridsterItemComponent\n    itemInitCallback: undefined,\n    // Arguments: gridsterItem, gridsterItemComponent\n    itemRemovedCallback: undefined,\n    // Arguments: gridsterItem, gridsterItemComponent\n    itemValidateCallback: undefined,\n    // Arguments: gridsterItem\n    enableEmptyCellClick: false,\n    enableEmptyCellContextMenu: false,\n    enableEmptyCellDrop: false,\n    enableEmptyCellDrag: false,\n    enableOccupiedCellDrop: false,\n    emptyCellClickCallback: undefined,\n    emptyCellContextMenuCallback: undefined,\n    emptyCellDropCallback: undefined,\n    emptyCellDragCallback: undefined,\n    emptyCellDragMaxCols: 50,\n    emptyCellDragMaxRows: 50,\n    // Arguments: event, gridsterItem{x, y, rows: defaultItemRows, cols: defaultItemCols}\n    ignoreMarginInRow: false,\n    draggable: {\n        delayStart: 0,\n        enabled: false,\n        ignoreContentClass: 'gridster-item-content',\n        ignoreContent: false,\n        dragHandleClass: 'drag-handler',\n        stop: undefined,\n        start: undefined,\n        // Arguments: item, gridsterItem, event\n        dropOverItems: false,\n        dropOverItemsCallback: undefined // callback on drop over another item\n        // Arguments: source, target, gridComponent\n    },\n    resizable: {\n        delayStart: 0,\n        enabled: false,\n        handles: {\n            s: true,\n            e: true,\n            n: true,\n            w: true,\n            se: true,\n            ne: true,\n            sw: true,\n            nw: true\n        },\n        stop: undefined,\n        start: undefined // callback when resizing an item starts.\n        // Arguments: item, gridsterItem, event\n    },\n    swap: true,\n    swapWhileDragging: false,\n    pushItems: false,\n    disablePushOnDrag: false,\n    disablePushOnResize: false,\n    pushDirections: { north: true, east: true, south: true, west: true },\n    pushResizeItems: false,\n    displayGrid: DisplayGrid.OnDragAndResize,\n    disableWindowResize: false,\n    disableWarnings: false,\n    scrollToNewItems: false,\n    disableScrollHorizontal: false,\n    disableScrollVertical: false,\n    disableAutoPositionOnConflict: false,\n    dirType: DirTypes.LTR,\n};\n\nvar GridsterUtils_1;\nlet GridsterUtils = GridsterUtils_1 = class GridsterUtils {\n    static merge(obj1, obj2, properties) {\n        for (const p in obj2) {\n            if (obj2[p] !== void 0 && properties.hasOwnProperty(p)) {\n                if (typeof obj2[p] === 'object') {\n                    obj1[p] = GridsterUtils_1.merge(obj1[p], obj2[p], properties[p]);\n                }\n                else {\n                    obj1[p] = obj2[p];\n                }\n            }\n        }\n        return obj1;\n    }\n    static debounce(func, wait) {\n        let timeout;\n        return function () {\n            const context = this, args = arguments;\n            const later = function () {\n                timeout = null;\n                func.apply(context, args);\n            };\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n        };\n    }\n    static checkTouchEvent(e) {\n        if (e.clientX === undefined && e.touches) {\n            if (e.touches && e.touches.length) {\n                e.clientX = e.touches[0].clientX;\n                e.clientY = e.touches[0].clientY;\n            }\n            else if (e.changedTouches && e.changedTouches.length) {\n                e.clientX = e.changedTouches[0].clientX;\n                e.clientY = e.changedTouches[0].clientY;\n            }\n        }\n    }\n    static checkContentClassForEvent(gridster, e) {\n        if (gridster.$options.draggable.ignoreContent) {\n            if (!GridsterUtils_1.checkDragHandleClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass, gridster.$options.draggable.ignoreContentClass)) {\n                return true;\n            }\n        }\n        else {\n            if (GridsterUtils_1.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    static checkContentClassForEmptyCellClickEvent(gridster, e) {\n        return GridsterUtils_1.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass)\n            || GridsterUtils_1.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass);\n    }\n    static checkDragHandleClass(target, current, dragHandleClass, ignoreContentClass) {\n        if (!target || target === current) {\n            return false;\n        }\n        if (target.hasAttribute('class')) {\n            const classnames = target.getAttribute('class').split(' ');\n            if (classnames.indexOf(dragHandleClass) > -1) {\n                return true;\n            }\n            if (classnames.indexOf(ignoreContentClass) > -1) {\n                return false;\n            }\n        }\n        return GridsterUtils_1.checkDragHandleClass(target.parentNode, current, dragHandleClass, ignoreContentClass);\n    }\n    static checkContentClass(target, current, contentClass) {\n        if (!target || target === current) {\n            return false;\n        }\n        if (target.hasAttribute('class') && target.getAttribute('class').split(' ').indexOf(contentClass) > -1) {\n            return true;\n        }\n        else {\n            return GridsterUtils_1.checkContentClass(target.parentNode, current, contentClass);\n        }\n    }\n    static compareItems(a, b) {\n        if (a.y > b.y) {\n            return -1;\n        }\n        else if (a.y < b.y) {\n            return 1;\n        }\n        else if (a.x > b.x) {\n            return -1;\n        }\n        else {\n            return 1;\n        }\n    }\n};\nGridsterUtils.ɵfac = function GridsterUtils_Factory(t) { return new (t || GridsterUtils)(); };\nGridsterUtils.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GridsterUtils, factory: GridsterUtils.ɵfac });\n\nlet GridsterEmptyCell = class GridsterEmptyCell {\n    constructor(gridster) {\n        this.gridster = gridster;\n    }\n    destroy() {\n        delete this.initialItem;\n        delete this.gridster.movingItem;\n        if (this.gridster.previewStyle) {\n            this.gridster.previewStyle();\n        }\n        delete this.gridster;\n        if (this.emptyCellExit) {\n            this.emptyCellExit();\n            this.emptyCellExit = null;\n        }\n    }\n    updateOptions() {\n        if (this.gridster.$options.enableEmptyCellClick && !this.emptyCellClick && this.gridster.options.emptyCellClickCallback) {\n            this.emptyCellClick = this.gridster.renderer.listen(this.gridster.el, 'click', this.emptyCellClickCb.bind(this));\n            this.emptyCellClickTouch = this.gridster.renderer.listen(this.gridster.el, 'touchend', this.emptyCellClickCb.bind(this));\n        }\n        else if (!this.gridster.$options.enableEmptyCellClick && this.emptyCellClick && this.emptyCellClickTouch) {\n            this.emptyCellClick();\n            this.emptyCellClickTouch();\n            this.emptyCellClick = null;\n            this.emptyCellClickTouch = null;\n        }\n        if (this.gridster.$options.enableEmptyCellContextMenu && !this.emptyCellContextMenu &&\n            this.gridster.options.emptyCellContextMenuCallback) {\n            this.emptyCellContextMenu = this.gridster.renderer.listen(this.gridster.el, 'contextmenu', this.emptyCellContextMenuCb.bind(this));\n        }\n        else if (!this.gridster.$options.enableEmptyCellContextMenu && this.emptyCellContextMenu) {\n            this.emptyCellContextMenu();\n            this.emptyCellContextMenu = null;\n        }\n        if (this.gridster.$options.enableEmptyCellDrop && !this.emptyCellDrop && this.gridster.options.emptyCellDropCallback) {\n            this.emptyCellDrop = this.gridster.renderer.listen(this.gridster.el, 'drop', this.emptyCellDragDrop.bind(this));\n            this.gridster.zone.runOutsideAngular(() => {\n                this.emptyCellMove = this.gridster.renderer.listen(this.gridster.el, 'dragover', this.emptyCellDragOver.bind(this));\n            });\n            this.emptyCellExit = this.gridster.renderer.listen('document', 'dragend', () => {\n                this.gridster.movingItem = null;\n                this.gridster.previewStyle();\n            });\n        }\n        else if (!this.gridster.$options.enableEmptyCellDrop && this.emptyCellDrop && this.emptyCellMove && this.emptyCellExit) {\n            this.emptyCellDrop();\n            this.emptyCellMove();\n            this.emptyCellExit();\n            this.emptyCellMove = null;\n            this.emptyCellDrop = null;\n            this.emptyCellExit = null;\n        }\n        if (this.gridster.$options.enableEmptyCellDrag && !this.emptyCellDrag && this.gridster.options.emptyCellDragCallback) {\n            this.emptyCellDrag = this.gridster.renderer.listen(this.gridster.el, 'mousedown', this.emptyCellMouseDown.bind(this));\n            this.emptyCellDragTouch = this.gridster.renderer.listen(this.gridster.el, 'touchstart', this.emptyCellMouseDown.bind(this));\n        }\n        else if (!this.gridster.$options.enableEmptyCellDrag && this.emptyCellDrag && this.emptyCellDragTouch) {\n            this.emptyCellDrag();\n            this.emptyCellDragTouch();\n            this.emptyCellDrag = null;\n            this.emptyCellDragTouch = null;\n        }\n    }\n    emptyCellClickCb(e) {\n        if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n            return;\n        }\n        const item = this.getValidItemFromEvent(e);\n        if (!item) {\n            return;\n        }\n        if (this.gridster.options.emptyCellClickCallback) {\n            this.gridster.options.emptyCellClickCallback(e, item);\n        }\n        this.gridster.cdRef.markForCheck();\n    }\n    emptyCellContextMenuCb(e) {\n        if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n            return;\n        }\n        e.preventDefault();\n        e.stopPropagation();\n        const item = this.getValidItemFromEvent(e);\n        if (!item) {\n            return;\n        }\n        if (this.gridster.options.emptyCellContextMenuCallback) {\n            this.gridster.options.emptyCellContextMenuCallback(e, item);\n        }\n        this.gridster.cdRef.markForCheck();\n    }\n    emptyCellDragDrop(e) {\n        const item = this.getValidItemFromEvent(e);\n        if (!item) {\n            return;\n        }\n        if (this.gridster.options.emptyCellDropCallback) {\n            this.gridster.options.emptyCellDropCallback(e, item);\n        }\n        this.gridster.cdRef.markForCheck();\n    }\n    emptyCellDragOver(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        const item = this.getValidItemFromEvent(e);\n        if (item) {\n            e.dataTransfer.dropEffect = 'move';\n            this.gridster.movingItem = item;\n        }\n        else {\n            e.dataTransfer.dropEffect = 'none';\n            this.gridster.movingItem = null;\n        }\n        this.gridster.previewStyle();\n    }\n    emptyCellMouseDown(e) {\n        if (GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n            return;\n        }\n        e.preventDefault();\n        e.stopPropagation();\n        const item = this.getValidItemFromEvent(e);\n        const leftMouseButtonCode = 1;\n        if (!item || e.buttons !== leftMouseButtonCode) {\n            return;\n        }\n        this.initialItem = item;\n        this.gridster.movingItem = item;\n        this.gridster.previewStyle();\n        this.gridster.zone.runOutsideAngular(() => {\n            this.emptyCellMMove = this.gridster.renderer.listen('window', 'mousemove', this.emptyCellMouseMove.bind(this));\n            this.emptyCellMMoveTouch = this.gridster.renderer.listen('window', 'touchmove', this.emptyCellMouseMove.bind(this));\n        });\n        this.emptyCellUp = this.gridster.renderer.listen('window', 'mouseup', this.emptyCellMouseUp.bind(this));\n        this.emptyCellUpTouch = this.gridster.renderer.listen('window', 'touchend', this.emptyCellMouseUp.bind(this));\n    }\n    emptyCellMouseMove(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        const item = this.getValidItemFromEvent(e, this.initialItem);\n        if (!item) {\n            return;\n        }\n        this.gridster.movingItem = item;\n        this.gridster.previewStyle();\n    }\n    emptyCellMouseUp(e) {\n        this.emptyCellMMove();\n        this.emptyCellMMoveTouch();\n        this.emptyCellUp();\n        this.emptyCellUpTouch();\n        const item = this.getValidItemFromEvent(e, this.initialItem);\n        if (item) {\n            this.gridster.movingItem = item;\n        }\n        if (this.gridster.options.emptyCellDragCallback && this.gridster.movingItem) {\n            this.gridster.options.emptyCellDragCallback(e, this.gridster.movingItem);\n        }\n        setTimeout(() => {\n            this.initialItem = null;\n            if (this.gridster) {\n                this.gridster.movingItem = null;\n                this.gridster.previewStyle();\n            }\n        });\n        this.gridster.cdRef.markForCheck();\n    }\n    getValidItemFromEvent(e, oldItem) {\n        e.preventDefault();\n        e.stopPropagation();\n        GridsterUtils.checkTouchEvent(e);\n        const rect = this.gridster.el.getBoundingClientRect();\n        const x = e.clientX + this.gridster.el.scrollLeft - rect.left - this.gridster.gridRenderer.getLeftMargin();\n        const y = e.clientY + this.gridster.el.scrollTop - rect.top - this.gridster.gridRenderer.getTopMargin();\n        const item = {\n            x: this.gridster.pixelsToPositionX(x, Math.floor, true),\n            y: this.gridster.pixelsToPositionY(y, Math.floor, true),\n            cols: this.gridster.$options.defaultItemCols,\n            rows: this.gridster.$options.defaultItemRows\n        };\n        if (oldItem) {\n            item.cols = Math.min(Math.abs(oldItem.x - item.x) + 1, this.gridster.$options.emptyCellDragMaxCols);\n            item.rows = Math.min(Math.abs(oldItem.y - item.y) + 1, this.gridster.$options.emptyCellDragMaxRows);\n            if (oldItem.x < item.x) {\n                item.x = oldItem.x;\n            }\n            else if (oldItem.x - item.x > this.gridster.$options.emptyCellDragMaxCols - 1) {\n                item.x = this.gridster.movingItem ? this.gridster.movingItem.x : 0;\n            }\n            if (oldItem.y < item.y) {\n                item.y = oldItem.y;\n            }\n            else if (oldItem.y - item.y > this.gridster.$options.emptyCellDragMaxRows - 1) {\n                item.y = this.gridster.movingItem ? this.gridster.movingItem.y : 0;\n            }\n        }\n        if (!this.gridster.$options.enableOccupiedCellDrop && this.gridster.checkCollision(item)) {\n            return;\n        }\n        return item;\n    }\n};\nGridsterEmptyCell.ɵfac = function GridsterEmptyCell_Factory(t) { return new (t || GridsterEmptyCell)(ɵngcc0.ɵɵinject(GridsterComponentInterface)); };\nGridsterEmptyCell.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GridsterEmptyCell, factory: GridsterEmptyCell.ɵfac });\nGridsterEmptyCell.ctorParameters = () => [\n    { type: GridsterComponentInterface }\n];\nGridsterEmptyCell = __decorate([ __metadata(\"design:paramtypes\", [GridsterComponentInterface])\n], GridsterEmptyCell);\n\nlet GridsterRenderer = class GridsterRenderer {\n    constructor(gridster) {\n        this.gridster = gridster;\n    }\n    destroy() {\n        delete this.gridster;\n    }\n    updateItem(el, item, renderer) {\n        if (this.gridster.mobile) {\n            this.clearCellPosition(renderer, el);\n            if (this.gridster.$options.keepFixedHeightInMobile) {\n                renderer.setStyle(el, 'height', (item.rows * this.gridster.$options.fixedRowHeight) + 'px');\n            }\n            else {\n                renderer.setStyle(el, 'height', (item.rows * this.gridster.curWidth / item.cols) + 'px');\n            }\n            if (this.gridster.$options.keepFixedWidthInMobile) {\n                renderer.setStyle(el, 'width', this.gridster.$options.fixedColWidth + 'px');\n            }\n            else {\n                renderer.setStyle(el, 'width', '');\n            }\n            renderer.setStyle(el, 'margin-bottom', this.gridster.$options.margin + 'px');\n            renderer.setStyle(el, 'margin-right', '');\n        }\n        else {\n            const x = Math.round(this.gridster.curColWidth * item.x);\n            const y = Math.round(this.gridster.curRowHeight * item.y);\n            const width = this.gridster.curColWidth * item.cols - this.gridster.$options.margin;\n            const height = (this.gridster.curRowHeight * item.rows - this.gridster.$options.margin);\n            // set the cell style\n            this.setCellPosition(renderer, el, x, y);\n            renderer.setStyle(el, 'width', width + 'px');\n            renderer.setStyle(el, 'height', height + 'px');\n            let marginBottom = null;\n            let marginRight = null;\n            if (this.gridster.$options.outerMargin) {\n                if (this.gridster.rows === item.rows + item.y) {\n                    if (this.gridster.$options.outerMarginBottom !== null) {\n                        marginBottom = this.gridster.$options.outerMarginBottom + 'px';\n                    }\n                    else {\n                        marginBottom = this.gridster.$options.margin + 'px';\n                    }\n                }\n                if (this.gridster.columns === item.cols + item.x) {\n                    if (this.gridster.$options.outerMarginBottom !== null) {\n                        marginRight = this.gridster.$options.outerMarginRight + 'px';\n                    }\n                    else {\n                        marginRight = this.gridster.$options.margin + 'px';\n                    }\n                }\n            }\n            renderer.setStyle(el, 'margin-bottom', marginBottom);\n            renderer.setStyle(el, 'margin-right', marginRight);\n        }\n    }\n    updateGridster() {\n        let addClass = '';\n        let removeClass1 = '';\n        let removeClass2 = '';\n        let removeClass3 = '';\n        if (this.gridster.$options.gridType === GridType.Fit) {\n            addClass = GridType.Fit;\n            removeClass1 = GridType.ScrollVertical;\n            removeClass2 = GridType.ScrollHorizontal;\n            removeClass3 = GridType.Fixed;\n        }\n        else if (this.gridster.$options.gridType === GridType.ScrollVertical) {\n            this.gridster.curRowHeight = this.gridster.curColWidth;\n            addClass = GridType.ScrollVertical;\n            removeClass1 = GridType.Fit;\n            removeClass2 = GridType.ScrollHorizontal;\n            removeClass3 = GridType.Fixed;\n        }\n        else if (this.gridster.$options.gridType === GridType.ScrollHorizontal) {\n            this.gridster.curColWidth = this.gridster.curRowHeight;\n            addClass = GridType.ScrollHorizontal;\n            removeClass1 = GridType.Fit;\n            removeClass2 = GridType.ScrollVertical;\n            removeClass3 = GridType.Fixed;\n        }\n        else if (this.gridster.$options.gridType === GridType.Fixed) {\n            this.gridster.curColWidth = this.gridster.$options.fixedColWidth +\n                (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n            this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight +\n                (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n            addClass = GridType.Fixed;\n            removeClass1 = GridType.Fit;\n            removeClass2 = GridType.ScrollVertical;\n            removeClass3 = GridType.ScrollHorizontal;\n        }\n        else if (this.gridster.$options.gridType === GridType.VerticalFixed) {\n            this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight +\n                (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n            addClass = GridType.ScrollVertical;\n            removeClass1 = GridType.Fit;\n            removeClass2 = GridType.ScrollHorizontal;\n            removeClass3 = GridType.Fixed;\n        }\n        else if (this.gridster.$options.gridType === GridType.HorizontalFixed) {\n            this.gridster.curColWidth = this.gridster.$options.fixedColWidth +\n                (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n            addClass = GridType.ScrollHorizontal;\n            removeClass1 = GridType.Fit;\n            removeClass2 = GridType.ScrollVertical;\n            removeClass3 = GridType.Fixed;\n        }\n        if (this.gridster.mobile) {\n            this.gridster.renderer.removeClass(this.gridster.el, addClass);\n        }\n        else {\n            this.gridster.renderer.addClass(this.gridster.el, addClass);\n        }\n        this.gridster.renderer.removeClass(this.gridster.el, removeClass1);\n        this.gridster.renderer.removeClass(this.gridster.el, removeClass2);\n        this.gridster.renderer.removeClass(this.gridster.el, removeClass3);\n    }\n    getGridColumnStyle(i) {\n        return Object.assign(Object.assign({}, this.getLeftPosition(this.gridster.curColWidth * i)), { width: this.gridster.curColWidth - this.gridster.$options.margin + 'px', height: this.gridster.gridRows.length * this.gridster.curRowHeight - this.gridster.$options.margin + 'px' });\n    }\n    getGridRowStyle(i) {\n        return Object.assign(Object.assign({}, this.getTopPosition(this.gridster.curRowHeight * i)), { width: this.gridster.gridColumns.length * this.gridster.curColWidth - this.gridster.$options.margin + 'px', height: this.gridster.curRowHeight - this.gridster.$options.margin + 'px' });\n    }\n    getLeftPosition(d) {\n        const dPosition = this.gridster.$options.dirType === DirTypes.RTL ? -d : d;\n        if (this.gridster.$options.useTransformPositioning) {\n            return {\n                transform: 'translateX(' + dPosition + 'px)',\n            };\n        }\n        else {\n            return {\n                left: (this.getLeftMargin() + dPosition) + 'px'\n            };\n        }\n    }\n    getTopPosition(d) {\n        if (this.gridster.$options.useTransformPositioning) {\n            return {\n                transform: 'translateY(' + d + 'px)',\n            };\n        }\n        else {\n            return {\n                top: this.getTopMargin() + d + 'px'\n            };\n        }\n    }\n    clearCellPosition(renderer, el) {\n        if (this.gridster.$options.useTransformPositioning) {\n            renderer.setStyle(el, 'transform', '');\n        }\n        else {\n            renderer.setStyle(el, 'top', '');\n            renderer.setStyle(el, 'left', '');\n        }\n    }\n    setCellPosition(renderer, el, x, y) {\n        const xPosition = this.gridster.$options.dirType === DirTypes.RTL ? -x : x;\n        if (this.gridster.$options.useTransformPositioning) {\n            const transform = 'translate3d(' + xPosition + 'px, ' + y + 'px, 0)';\n            renderer.setStyle(el, 'transform', transform);\n        }\n        else {\n            renderer.setStyle(el, 'left', this.getLeftMargin() + xPosition + 'px');\n            renderer.setStyle(el, 'top', this.getTopMargin() + y + 'px');\n        }\n    }\n    getLeftMargin() {\n        if (this.gridster.$options.outerMargin) {\n            if (this.gridster.$options.outerMarginLeft !== null) {\n                return this.gridster.$options.outerMarginLeft;\n            }\n            else {\n                return this.gridster.$options.margin;\n            }\n        }\n        else {\n            return 0;\n        }\n    }\n    getTopMargin() {\n        if (this.gridster.$options.outerMargin) {\n            if (this.gridster.$options.outerMarginTop !== null) {\n                return this.gridster.$options.outerMarginTop;\n            }\n            else {\n                return this.gridster.$options.margin;\n            }\n        }\n        else {\n            return 0;\n        }\n    }\n};\nGridsterRenderer.ɵfac = function GridsterRenderer_Factory(t) { return new (t || GridsterRenderer)(ɵngcc0.ɵɵinject(GridsterComponentInterface)); };\nGridsterRenderer.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GridsterRenderer, factory: GridsterRenderer.ɵfac });\nGridsterRenderer.ctorParameters = () => [\n    { type: GridsterComponentInterface }\n];\nGridsterRenderer = __decorate([ __metadata(\"design:paramtypes\", [GridsterComponentInterface])\n], GridsterRenderer);\n\nvar GridsterComponent_1;\nlet GridsterComponent = GridsterComponent_1 = class GridsterComponent {\n    constructor(el, renderer, cdRef, zone) {\n        this.renderer = renderer;\n        this.cdRef = cdRef;\n        this.zone = zone;\n        this.columns = 0;\n        this.rows = 0;\n        this.gridColumns = [];\n        this.gridRows = [];\n        this.el = el.nativeElement;\n        this.$options = JSON.parse(JSON.stringify(GridsterConfigService));\n        this.calculateLayoutDebounce = GridsterUtils.debounce(this.calculateLayout.bind(this), 0);\n        this.mobile = false;\n        this.curWidth = 0;\n        this.curHeight = 0;\n        this.grid = [];\n        this.curColWidth = 0;\n        this.curRowHeight = 0;\n        this.dragInProgress = false;\n        this.emptyCell = new GridsterEmptyCell(this);\n        this.compact = new GridsterCompact(this);\n        this.gridRenderer = new GridsterRenderer(this);\n    }\n    checkCollisionTwoItems(item, item2) {\n        const collision = item.x < item2.x + item2.cols\n            && item.x + item.cols > item2.x\n            && item.y < item2.y + item2.rows\n            && item.y + item.rows > item2.y;\n        if (!collision) {\n            return false;\n        }\n        if (!this.$options.allowMultiLayer) {\n            return true;\n        }\n        const defaultLayerIndex = this.$options.defaultLayerIndex;\n        const layerIndex = item.layerIndex === undefined ? defaultLayerIndex : item.layerIndex;\n        const layerIndex2 = item2.layerIndex === undefined ? defaultLayerIndex : item2.layerIndex;\n        return layerIndex === layerIndex2;\n    }\n    ngOnInit() {\n        if (this.options.initCallback) {\n            this.options.initCallback(this);\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes.options) {\n            this.setOptions();\n            this.options.api = {\n                optionsChanged: this.optionsChanged.bind(this),\n                resize: this.onResize.bind(this),\n                getNextPossiblePosition: this.getNextPossiblePosition.bind(this),\n                getFirstPossiblePosition: this.getFirstPossiblePosition.bind(this),\n                getLastPossiblePosition: this.getLastPossiblePosition.bind(this),\n            };\n            this.columns = this.$options.minCols;\n            this.rows = this.$options.minRows;\n            this.setGridSize();\n            this.calculateLayout();\n        }\n    }\n    resize() {\n        let height;\n        let width;\n        if (this.$options.gridType === 'fit' && !this.mobile) {\n            width = this.el.offsetWidth;\n            height = this.el.offsetHeight;\n        }\n        else {\n            width = this.el.clientWidth;\n            height = this.el.clientHeight;\n        }\n        if ((width !== this.curWidth || height !== this.curHeight) && this.checkIfToResize()) {\n            this.onResize();\n        }\n    }\n    setOptions() {\n        this.$options = GridsterUtils.merge(this.$options, this.options, this.$options);\n        if (!this.$options.disableWindowResize && !this.windowResize) {\n            this.windowResize = this.renderer.listen('window', 'resize', this.onResize.bind(this));\n        }\n        else if (this.$options.disableWindowResize && this.windowResize) {\n            this.windowResize();\n            this.windowResize = null;\n        }\n        this.emptyCell.updateOptions();\n    }\n    optionsChanged() {\n        this.setOptions();\n        let widgetsIndex = this.grid.length - 1;\n        let widget;\n        for (; widgetsIndex >= 0; widgetsIndex--) {\n            widget = this.grid[widgetsIndex];\n            widget.updateOptions();\n        }\n        this.calculateLayout();\n    }\n    ngOnDestroy() {\n        if (this.windowResize) {\n            this.windowResize();\n        }\n        if (this.options && this.options.destroyCallback) {\n            this.options.destroyCallback(this);\n        }\n        if (this.options && this.options.api) {\n            this.options.api.resize = undefined;\n            this.options.api.optionsChanged = undefined;\n            this.options.api.getNextPossiblePosition = undefined;\n            this.options.api = undefined;\n        }\n        this.emptyCell.destroy();\n        delete this.emptyCell;\n        this.compact.destroy();\n        delete this.compact;\n    }\n    onResize() {\n        this.setGridSize();\n        this.calculateLayout();\n    }\n    checkIfToResize() {\n        const clientWidth = this.el.clientWidth;\n        const offsetWidth = this.el.offsetWidth;\n        const scrollWidth = this.el.scrollWidth;\n        const clientHeight = this.el.clientHeight;\n        const offsetHeight = this.el.offsetHeight;\n        const scrollHeight = this.el.scrollHeight;\n        const verticalScrollPresent = clientWidth < offsetWidth && scrollHeight > offsetHeight\n            && scrollHeight - offsetHeight < offsetWidth - clientWidth;\n        const horizontalScrollPresent = clientHeight < offsetHeight\n            && scrollWidth > offsetWidth && scrollWidth - offsetWidth < offsetHeight - clientHeight;\n        if (verticalScrollPresent) {\n            return false;\n        }\n        return !horizontalScrollPresent;\n    }\n    setGridSize() {\n        const el = this.el;\n        let width;\n        let height;\n        if (this.$options.setGridSize || this.$options.gridType === 'fit' && !this.mobile) {\n            width = el.offsetWidth;\n            height = el.offsetHeight;\n        }\n        else {\n            width = el.clientWidth;\n            height = el.clientHeight;\n        }\n        this.curWidth = width;\n        this.curHeight = height;\n    }\n    setGridDimensions() {\n        this.setGridSize();\n        if (!this.mobile && this.$options.mobileBreakpoint > this.curWidth) {\n            this.mobile = !this.mobile;\n            this.renderer.addClass(this.el, 'mobile');\n        }\n        else if (this.mobile && this.$options.mobileBreakpoint < this.curWidth) {\n            this.mobile = !this.mobile;\n            this.renderer.removeClass(this.el, 'mobile');\n        }\n        let rows = this.$options.minRows;\n        let columns = this.$options.minCols;\n        let widgetsIndex = this.grid.length - 1;\n        let widget;\n        for (; widgetsIndex >= 0; widgetsIndex--) {\n            widget = this.grid[widgetsIndex];\n            if (!widget.notPlaced) {\n                rows = Math.max(rows, widget.$item.y + widget.$item.rows);\n                columns = Math.max(columns, widget.$item.x + widget.$item.cols);\n            }\n        }\n        if (this.columns !== columns || this.rows !== rows) {\n            this.columns = columns;\n            this.rows = rows;\n            if (this.options.gridSizeChangedCallback) {\n                this.options.gridSizeChangedCallback(this);\n            }\n        }\n    }\n    calculateLayout() {\n        if (this.compact) {\n            this.compact.checkCompact();\n        }\n        this.setGridDimensions();\n        if (this.$options.outerMargin) {\n            let marginWidth = -this.$options.margin;\n            if (this.$options.outerMarginLeft !== null) {\n                marginWidth += this.$options.outerMarginLeft;\n                this.renderer.setStyle(this.el, 'padding-left', this.$options.outerMarginLeft + 'px');\n            }\n            else {\n                marginWidth += this.$options.margin;\n                this.renderer.setStyle(this.el, 'padding-left', this.$options.margin + 'px');\n            }\n            if (this.$options.outerMarginRight !== null) {\n                marginWidth += this.$options.outerMarginRight;\n                this.renderer.setStyle(this.el, 'padding-right', this.$options.outerMarginRight + 'px');\n            }\n            else {\n                marginWidth += this.$options.margin;\n                this.renderer.setStyle(this.el, 'padding-right', this.$options.margin + 'px');\n            }\n            this.curColWidth = (this.curWidth - marginWidth) / this.columns;\n            let marginHeight = -this.$options.margin;\n            if (this.$options.outerMarginTop !== null) {\n                marginHeight += this.$options.outerMarginTop;\n                this.renderer.setStyle(this.el, 'padding-top', this.$options.outerMarginTop + 'px');\n            }\n            else {\n                marginHeight += this.$options.margin;\n                this.renderer.setStyle(this.el, 'padding-top', this.$options.margin + 'px');\n            }\n            if (this.$options.outerMarginBottom !== null) {\n                marginHeight += this.$options.outerMarginBottom;\n                this.renderer.setStyle(this.el, 'padding-bottom', this.$options.outerMarginBottom + 'px');\n            }\n            else {\n                marginHeight += this.$options.margin;\n                this.renderer.setStyle(this.el, 'padding-bottom', this.$options.margin + 'px');\n            }\n            this.curRowHeight = (this.curHeight - marginHeight) / this.rows;\n        }\n        else {\n            this.curColWidth = (this.curWidth + this.$options.margin) / this.columns;\n            this.curRowHeight = (this.curHeight + this.$options.margin) / this.rows;\n            this.renderer.setStyle(this.el, 'padding-left', 0 + 'px');\n            this.renderer.setStyle(this.el, 'padding-right', 0 + 'px');\n            this.renderer.setStyle(this.el, 'padding-top', 0 + 'px');\n            this.renderer.setStyle(this.el, 'padding-bottom', 0 + 'px');\n        }\n        this.gridRenderer.updateGridster();\n        this.updateGrid();\n        if (this.$options.setGridSize) {\n            this.renderer.setStyle(this.el, 'width', (this.columns * this.curColWidth + this.$options.margin) + 'px');\n            this.renderer.setStyle(this.el, 'height', (this.rows * this.curRowHeight + this.$options.margin) + 'px');\n        }\n        else {\n            this.renderer.setStyle(this.el, 'width', '');\n            this.renderer.setStyle(this.el, 'height', '');\n        }\n        let widgetsIndex = this.grid.length - 1;\n        let widget;\n        for (; widgetsIndex >= 0; widgetsIndex--) {\n            widget = this.grid[widgetsIndex];\n            widget.setSize();\n            widget.drag.toggle();\n            widget.resize.toggle();\n        }\n        setTimeout(this.resize.bind(this), 100);\n    }\n    updateGrid() {\n        if (this.$options.displayGrid === 'always' && !this.mobile) {\n            this.renderer.addClass(this.el, 'display-grid');\n        }\n        else if (this.$options.displayGrid === 'onDrag&Resize' && this.dragInProgress) {\n            this.renderer.addClass(this.el, 'display-grid');\n        }\n        else if (this.$options.displayGrid === 'none' || !this.dragInProgress || this.mobile) {\n            this.renderer.removeClass(this.el, 'display-grid');\n        }\n        this.setGridDimensions();\n        this.gridColumns.length = GridsterComponent_1.getNewArrayLength(this.columns, this.curWidth, this.curColWidth);\n        this.gridRows.length = GridsterComponent_1.getNewArrayLength(this.rows, this.curHeight, this.curRowHeight);\n        this.cdRef.markForCheck();\n    }\n    addItem(itemComponent) {\n        if (itemComponent.$item.cols === undefined) {\n            itemComponent.$item.cols = this.$options.defaultItemCols;\n            itemComponent.item.cols = itemComponent.$item.cols;\n            itemComponent.itemChanged();\n        }\n        if (itemComponent.$item.rows === undefined) {\n            itemComponent.$item.rows = this.$options.defaultItemRows;\n            itemComponent.item.rows = itemComponent.$item.rows;\n            itemComponent.itemChanged();\n        }\n        if (itemComponent.$item.x === -1 || itemComponent.$item.y === -1) {\n            this.autoPositionItem(itemComponent);\n        }\n        else if (this.checkCollision(itemComponent.$item)) {\n            if (!this.$options.disableWarnings) {\n                itemComponent.notPlaced = true;\n                console.warn('Can\\'t be placed in the bounds of the dashboard, trying to auto position!/n' +\n                    JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n            }\n            if (!this.$options.disableAutoPositionOnConflict) {\n                this.autoPositionItem(itemComponent);\n            }\n            else {\n                itemComponent.notPlaced = true;\n            }\n        }\n        this.grid.push(itemComponent);\n        this.calculateLayoutDebounce();\n    }\n    removeItem(itemComponent) {\n        this.grid.splice(this.grid.indexOf(itemComponent), 1);\n        this.calculateLayoutDebounce();\n        if (this.options.itemRemovedCallback) {\n            this.options.itemRemovedCallback(itemComponent.item, itemComponent);\n        }\n    }\n    checkCollision(item) {\n        let collision = false;\n        if (this.options.itemValidateCallback) {\n            collision = !this.options.itemValidateCallback(item);\n        }\n        if (!collision && this.checkGridCollision(item)) {\n            collision = true;\n        }\n        if (!collision) {\n            const c = this.findItemWithItem(item);\n            if (c) {\n                collision = c;\n            }\n        }\n        return collision;\n    }\n    checkGridCollision(item) {\n        const noNegativePosition = item.y > -1 && item.x > -1;\n        const maxGridCols = item.cols + item.x <= this.$options.maxCols;\n        const maxGridRows = item.rows + item.y <= this.$options.maxRows;\n        const maxItemCols = item.maxItemCols === undefined ? this.$options.maxItemCols : item.maxItemCols;\n        const minItemCols = item.minItemCols === undefined ? this.$options.minItemCols : item.minItemCols;\n        const maxItemRows = item.maxItemRows === undefined ? this.$options.maxItemRows : item.maxItemRows;\n        const minItemRows = item.minItemRows === undefined ? this.$options.minItemRows : item.minItemRows;\n        const inColsLimits = item.cols <= maxItemCols && item.cols >= minItemCols;\n        const inRowsLimits = item.rows <= maxItemRows && item.rows >= minItemRows;\n        const minAreaLimit = item.minItemArea === undefined ? this.$options.minItemArea : item.minItemArea;\n        const maxAreaLimit = item.maxItemArea === undefined ? this.$options.maxItemArea : item.maxItemArea;\n        const area = item.cols * item.rows;\n        const inMinArea = minAreaLimit <= area;\n        const inMaxArea = maxAreaLimit >= area;\n        return !(noNegativePosition && maxGridCols && maxGridRows && inColsLimits && inRowsLimits && inMinArea && inMaxArea);\n    }\n    findItemWithItem(item) {\n        let widgetsIndex = this.grid.length - 1;\n        let widget;\n        for (; widgetsIndex > -1; widgetsIndex--) {\n            widget = this.grid[widgetsIndex];\n            if (widget.$item !== item && this.checkCollisionTwoItems(widget.$item, item)) {\n                return widget;\n            }\n        }\n        return false;\n    }\n    findItemsWithItem(item) {\n        const a = [];\n        let widgetsIndex = this.grid.length - 1;\n        let widget;\n        for (; widgetsIndex > -1; widgetsIndex--) {\n            widget = this.grid[widgetsIndex];\n            if (widget.$item !== item && this.checkCollisionTwoItems(widget.$item, item)) {\n                a.push(widget);\n            }\n        }\n        return a;\n    }\n    autoPositionItem(itemComponent) {\n        if (this.getNextPossiblePosition(itemComponent.$item)) {\n            itemComponent.notPlaced = false;\n            itemComponent.item.x = itemComponent.$item.x;\n            itemComponent.item.y = itemComponent.$item.y;\n            itemComponent.itemChanged();\n        }\n        else {\n            itemComponent.notPlaced = true;\n            if (!this.$options.disableWarnings) {\n                console.warn('Can\\'t be placed in the bounds of the dashboard!/n' +\n                    JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n            }\n        }\n    }\n    getNextPossiblePosition(newItem, startingFrom = {}) {\n        if (newItem.cols === -1) {\n            newItem.cols = this.$options.defaultItemCols;\n        }\n        if (newItem.rows === -1) {\n            newItem.rows = this.$options.defaultItemRows;\n        }\n        this.setGridDimensions();\n        let rowsIndex = startingFrom.y || 0;\n        let colsIndex;\n        for (; rowsIndex < this.rows; rowsIndex++) {\n            newItem.y = rowsIndex;\n            colsIndex = startingFrom.x || 0;\n            for (; colsIndex < this.columns; colsIndex++) {\n                newItem.x = colsIndex;\n                if (!this.checkCollision(newItem)) {\n                    return true;\n                }\n            }\n        }\n        const canAddToRows = this.$options.maxRows >= this.rows + newItem.rows;\n        const canAddToColumns = this.$options.maxCols >= this.columns + newItem.cols;\n        const addToRows = this.rows <= this.columns && canAddToRows;\n        if (!addToRows && canAddToColumns) {\n            newItem.x = this.columns;\n            newItem.y = 0;\n            return true;\n        }\n        else if (canAddToRows) {\n            newItem.y = this.rows;\n            newItem.x = 0;\n            return true;\n        }\n        return false;\n    }\n    getFirstPossiblePosition(item) {\n        const tmpItem = Object.assign({}, item);\n        this.getNextPossiblePosition(tmpItem);\n        return tmpItem;\n    }\n    getLastPossiblePosition(item) {\n        let farthestItem = { y: 0, x: 0 };\n        farthestItem = this.grid.reduce((prev, curr) => {\n            const currCoords = { y: curr.$item.y + curr.$item.rows - 1, x: curr.$item.x + curr.$item.cols - 1 };\n            if (GridsterUtils.compareItems(prev, currCoords) === 1) {\n                return currCoords;\n            }\n            else {\n                return prev;\n            }\n        }, farthestItem);\n        const tmpItem = Object.assign({}, item);\n        this.getNextPossiblePosition(tmpItem, farthestItem);\n        return tmpItem;\n    }\n    pixelsToPositionX(x, roundingMethod, noLimit) {\n        const position = roundingMethod(x / this.curColWidth);\n        if (noLimit) {\n            return position;\n        }\n        else {\n            return Math.max(position, 0);\n        }\n    }\n    pixelsToPositionY(y, roundingMethod, noLimit) {\n        const position = roundingMethod(y / this.curRowHeight);\n        if (noLimit) {\n            return position;\n        }\n        else {\n            return Math.max(position, 0);\n        }\n    }\n    positionXToPixels(x) {\n        return x * this.curColWidth;\n    }\n    positionYToPixels(y) {\n        return y * this.curRowHeight;\n    }\n    // ------ Functions for swapWhileDragging option\n    // identical to checkCollision() except that here we add bondaries.\n    static checkCollisionTwoItemsForSwaping(item, item2) {\n        // if the cols or rows of the items are 1 , doesnt make any sense to set a boundary. Only if the item is bigger we set a boundary\n        const horizontalBoundaryItem1 = item.cols === 1 ? 0 : 1;\n        const horizontalBoundaryItem2 = item2.cols === 1 ? 0 : 1;\n        const verticalBoundaryItem1 = item.rows === 1 ? 0 : 1;\n        const verticalBoundaryItem2 = item2.rows === 1 ? 0 : 1;\n        return item.x + horizontalBoundaryItem1 < item2.x + item2.cols\n            && item.x + item.cols > item2.x + horizontalBoundaryItem2\n            && item.y + verticalBoundaryItem1 < item2.y + item2.rows\n            && item.y + item.rows > item2.y + verticalBoundaryItem2;\n    }\n    // identical to checkCollision() except that this function calls findItemWithItemForSwaping() instead of findItemWithItem()\n    checkCollisionForSwaping(item) {\n        let collision = false;\n        if (this.options.itemValidateCallback) {\n            collision = !this.options.itemValidateCallback(item);\n        }\n        if (!collision && this.checkGridCollision(item)) {\n            collision = true;\n        }\n        if (!collision) {\n            const c = this.findItemWithItemForSwaping(item);\n            if (c) {\n                collision = c;\n            }\n        }\n        return collision;\n    }\n    // identical to findItemWithItem() except that this function calls checkCollisionTwoItemsForSwaping() instead of checkCollisionTwoItems()\n    findItemWithItemForSwaping(item) {\n        let widgetsIndex = this.grid.length - 1;\n        let widget;\n        for (; widgetsIndex > -1; widgetsIndex--) {\n            widget = this.grid[widgetsIndex];\n            if (widget.$item !== item && GridsterComponent_1.checkCollisionTwoItemsForSwaping(widget.$item, item)) {\n                return widget;\n            }\n        }\n        return false;\n    }\n    // ------ End of functions for swapWhileDragging option\n    // tslint:disable-next-line:member-ordering\n    static getNewArrayLength(length, overallSize, size) {\n        const newLength = Math.max(length, Math.floor(overallSize / size));\n        if (newLength < 0) {\n            return 0;\n        }\n        if (Number.isFinite(newLength)) {\n            return Math.floor(newLength);\n        }\n        return 0;\n    }\n};\nGridsterComponent.ɵfac = function GridsterComponent_Factory(t) { return new (t || GridsterComponent)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(NgZone)); };\nGridsterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: GridsterComponent, selectors: [[\"gridster\"]], inputs: { options: \"options\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 4, vars: 2, consts: [[\"class\", \"gridster-column\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"gridster-row\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [1, \"gridster-preview\"], [1, \"gridster-column\", 3, \"ngStyle\"], [1, \"gridster-row\", 3, \"ngStyle\"]], template: function GridsterComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, GridsterComponent_div_0_Template, 1, 1, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, GridsterComponent_div_1_Template, 1, 1, \"div\", 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelement(3, \"gridster-preview\", 2);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.gridColumns);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.gridRows);\n    } }, directives: function () { return [ɵngcc1.NgForOf, GridsterPreviewComponent, ɵngcc1.NgStyle]; }, styles: [\"gridster{position:relative;box-sizing:border-box;background:grey;width:100%;height:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:block}gridster.fit{overflow-x:hidden;overflow-y:hidden}gridster.scrollVertical{overflow-x:hidden;overflow-y:auto}gridster.scrollHorizontal{overflow-x:auto;overflow-y:hidden}gridster.fixed{overflow:auto}gridster.mobile{overflow-x:hidden;overflow-y:auto}gridster.mobile gridster-item{position:relative}gridster .gridster-column,gridster .gridster-row{position:absolute;display:none;transition:.3s;box-sizing:border-box}gridster.display-grid .gridster-column,gridster.display-grid .gridster-row{display:block}gridster .gridster-column{border-left:1px solid #fff;border-right:1px solid #fff}gridster .gridster-row{border-top:1px solid #fff;border-bottom:1px solid #fff}\"], encapsulation: 2 });\nGridsterComponent.ctorParameters = () => [\n    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },\n    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },\n    { type: ChangeDetectorRef, decorators: [{ type: Inject, args: [ChangeDetectorRef,] }] },\n    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], GridsterComponent.prototype, \"options\", void 0);\nGridsterComponent = GridsterComponent_1 = __decorate([ __param(0, Inject(ElementRef)), __param(1, Inject(Renderer2)),\n    __param(2, Inject(ChangeDetectorRef)),\n    __param(3, Inject(NgZone)),\n    __metadata(\"design:paramtypes\", [ElementRef, Renderer2,\n        ChangeDetectorRef,\n        NgZone])\n], GridsterComponent);\n\nclass GridsterItemComponentInterface {\n}\n\nlet GridsterPush = class GridsterPush {\n    constructor(gridsterItem) {\n        this.pushedItems = [];\n        this.pushedItemsTemp = [];\n        this.pushedItemsTempPath = [];\n        this.pushedItemsPath = [];\n        gridsterItem['id'] = this.generateTempRandomId();\n        this.gridsterItem = gridsterItem;\n        this.gridster = gridsterItem.gridster;\n        this.tryPattern = {\n            fromEast: [this.tryWest, this.trySouth, this.tryNorth, this.tryEast],\n            fromWest: [this.tryEast, this.trySouth, this.tryNorth, this.tryWest],\n            fromNorth: [this.trySouth, this.tryEast, this.tryWest, this.tryNorth],\n            fromSouth: [this.tryNorth, this.tryEast, this.tryWest, this.trySouth]\n        };\n        this.fromSouth = 'fromSouth';\n        this.fromNorth = 'fromNorth';\n        this.fromEast = 'fromEast';\n        this.fromWest = 'fromWest';\n    }\n    destroy() {\n        delete this.gridster;\n        delete this.gridsterItem;\n    }\n    pushItems(direction, disable) {\n        if (this.gridster.$options.pushItems && !disable) {\n            this.pushedItemsOrder = [];\n            const pushed = this.push(this.gridsterItem, direction);\n            if (!pushed) {\n                this.restoreTempItems();\n            }\n            this.pushedItemsOrder = [];\n            this.pushedItemsTemp = [];\n            this.pushedItemsTempPath = [];\n            this.cleanTempIds();\n            return pushed;\n        }\n        else {\n            return false;\n        }\n    }\n    restoreTempItems() {\n        let i = this.pushedItemsTemp.length - 1;\n        for (; i > -1; i--) {\n            this.removeFromTempPushed(this.pushedItemsTemp[i]);\n        }\n    }\n    restoreItems() {\n        let i = 0;\n        const l = this.pushedItems.length;\n        let pushedItem;\n        for (; i < l; i++) {\n            pushedItem = this.pushedItems[i];\n            pushedItem.$item.x = pushedItem.item.x || 0;\n            pushedItem.$item.y = pushedItem.item.y || 0;\n            pushedItem.setSize();\n        }\n        this.pushedItems = [];\n        this.pushedItemsPath = [];\n    }\n    setPushedItems() {\n        let i = 0;\n        const l = this.pushedItems.length;\n        let pushedItem;\n        for (; i < l; i++) {\n            pushedItem = this.pushedItems[i];\n            pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n        }\n        this.pushedItems = [];\n        this.pushedItemsPath = [];\n    }\n    checkPushBack() {\n        let i = this.pushedItems.length - 1;\n        let change = false;\n        for (; i > -1; i--) {\n            if (this.checkPushedItem(this.pushedItems[i], i)) {\n                change = true;\n            }\n        }\n        if (change) {\n            this.checkPushBack();\n        }\n    }\n    generateTempRandomId() {\n        return Math.random().toString(36).replace(/[^a-z]+/g, '').substr(2, 10);\n    }\n    cleanTempIds() {\n        const allItemsWithIds = this.gridster.grid.filter((el) => el['id']);\n        allItemsWithIds.forEach((el) => delete el['id']);\n    }\n    push(gridsterItem, direction) {\n        if (this.gridster.checkGridCollision(gridsterItem.$item)) {\n            return false;\n        }\n        if (direction === '') {\n            return false;\n        }\n        const a = this.gridster.findItemsWithItem(gridsterItem.$item);\n        let i = a.length - 1, itemCollision;\n        let makePush = true;\n        const b = [];\n        for (; i > -1; i--) {\n            itemCollision = a[i];\n            if (!itemCollision['id']) {\n                itemCollision['id'] = this.generateTempRandomId();\n            }\n            if (itemCollision === this.gridsterItem) {\n                makePush = false;\n                break;\n            }\n            if (!itemCollision.canBeDragged()) {\n                makePush = false;\n                break;\n            }\n            const compare = this.pushedItemsTemp.find((el) => {\n                return el['id'] === itemCollision['id'];\n            });\n            if (compare) {\n                makePush = false;\n                break;\n            }\n            if (this.tryPattern[direction][0].call(this, itemCollision, gridsterItem)) {\n                this.pushedItemsOrder.push(itemCollision);\n                b.push(itemCollision);\n            }\n            else if (this.tryPattern[direction][1].call(this, itemCollision, gridsterItem)) {\n                this.pushedItemsOrder.push(itemCollision);\n                b.push(itemCollision);\n            }\n            else if (this.tryPattern[direction][2].call(this, itemCollision, gridsterItem)) {\n                this.pushedItemsOrder.push(itemCollision);\n                b.push(itemCollision);\n            }\n            else if (this.tryPattern[direction][3].call(this, itemCollision, gridsterItem)) {\n                this.pushedItemsOrder.push(itemCollision);\n                b.push(itemCollision);\n            }\n            else {\n                makePush = false;\n                break;\n            }\n        }\n        if (!makePush) {\n            i = this.pushedItemsOrder.lastIndexOf(b[0]);\n            if (i > -1) {\n                let j = this.pushedItemsOrder.length - 1;\n                for (; j >= i; j--) {\n                    itemCollision = this.pushedItemsOrder[j];\n                    this.pushedItemsOrder.pop();\n                    this.removeFromTempPushed(itemCollision);\n                    this.removeFromPushedItem(itemCollision);\n                }\n            }\n        }\n        return makePush;\n    }\n    trySouth(gridsterItemCollide, gridsterItem) {\n        if (!this.gridster.$options.pushDirections.south) {\n            return false;\n        }\n        this.addToTempPushed(gridsterItemCollide);\n        gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n        if (this.push(gridsterItemCollide, this.fromNorth)) {\n            gridsterItemCollide.setSize();\n            this.addToPushed(gridsterItemCollide);\n            return true;\n        }\n        else {\n            this.removeFromTempPushed(gridsterItemCollide);\n        }\n        return false;\n    }\n    tryNorth(gridsterItemCollide, gridsterItem) {\n        if (!this.gridster.$options.pushDirections.north) {\n            return false;\n        }\n        this.addToTempPushed(gridsterItemCollide);\n        gridsterItemCollide.$item.y = gridsterItem.$item.y - gridsterItemCollide.$item.rows;\n        if (this.push(gridsterItemCollide, this.fromSouth)) {\n            gridsterItemCollide.setSize();\n            this.addToPushed(gridsterItemCollide);\n            return true;\n        }\n        else {\n            this.removeFromTempPushed(gridsterItemCollide);\n        }\n        return false;\n    }\n    tryEast(gridsterItemCollide, gridsterItem) {\n        if (!this.gridster.$options.pushDirections.east) {\n            return false;\n        }\n        this.addToTempPushed(gridsterItemCollide);\n        gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n        if (this.push(gridsterItemCollide, this.fromWest)) {\n            gridsterItemCollide.setSize();\n            this.addToPushed(gridsterItemCollide);\n            return true;\n        }\n        else {\n            this.removeFromTempPushed(gridsterItemCollide);\n        }\n        return false;\n    }\n    tryWest(gridsterItemCollide, gridsterItem) {\n        if (!this.gridster.$options.pushDirections.west) {\n            return false;\n        }\n        this.addToTempPushed(gridsterItemCollide);\n        gridsterItemCollide.$item.x = gridsterItem.$item.x - gridsterItemCollide.$item.cols;\n        if (this.push(gridsterItemCollide, this.fromEast)) {\n            gridsterItemCollide.setSize();\n            this.addToPushed(gridsterItemCollide);\n            return true;\n        }\n        else {\n            this.removeFromTempPushed(gridsterItemCollide);\n        }\n        return false;\n    }\n    addToTempPushed(gridsterItem) {\n        let i = this.pushedItemsTemp.indexOf(gridsterItem);\n        if (i === -1) {\n            i = this.pushedItemsTemp.push(gridsterItem) - 1;\n            this.pushedItemsTempPath[i] = [];\n        }\n        this.pushedItemsTempPath[i].push({ x: gridsterItem.$item.x, y: gridsterItem.$item.y });\n    }\n    removeFromTempPushed(gridsterItem) {\n        const i = this.pushedItemsTemp.indexOf(gridsterItem);\n        const tempPosition = this.pushedItemsTempPath[i].pop();\n        if (!tempPosition) {\n            return;\n        }\n        gridsterItem.$item.x = tempPosition.x;\n        gridsterItem.$item.y = tempPosition.y;\n        gridsterItem.setSize();\n        if (!this.pushedItemsTempPath[i].length) {\n            this.pushedItemsTemp.splice(i, 1);\n            this.pushedItemsTempPath.splice(i, 1);\n        }\n    }\n    addToPushed(gridsterItem) {\n        if (this.pushedItems.indexOf(gridsterItem) < 0) {\n            this.pushedItems.push(gridsterItem);\n            this.pushedItemsPath.push([{ x: gridsterItem.item.x || 0, y: gridsterItem.item.y || 0 },\n                { x: gridsterItem.$item.x, y: gridsterItem.$item.y }]);\n        }\n        else {\n            const i = this.pushedItems.indexOf(gridsterItem);\n            this.pushedItemsPath[i].push({ x: gridsterItem.$item.x, y: gridsterItem.$item.y });\n        }\n    }\n    removeFromPushed(i) {\n        if (i > -1) {\n            this.pushedItems.splice(i, 1);\n            this.pushedItemsPath.splice(i, 1);\n        }\n    }\n    removeFromPushedItem(gridsterItem) {\n        const i = this.pushedItems.indexOf(gridsterItem);\n        if (i > -1) {\n            this.pushedItemsPath[i].pop();\n            if (!this.pushedItemsPath.length) {\n                this.pushedItems.splice(i, 1);\n                this.pushedItemsPath.splice(i, 1);\n            }\n        }\n    }\n    checkPushedItem(pushedItem, i) {\n        const path = this.pushedItemsPath[i];\n        let j = path.length - 2;\n        let lastPosition, x, y;\n        let change = false;\n        for (; j > -1; j--) {\n            lastPosition = path[j];\n            x = pushedItem.$item.x;\n            y = pushedItem.$item.y;\n            pushedItem.$item.x = lastPosition.x;\n            pushedItem.$item.y = lastPosition.y;\n            if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n                pushedItem.setSize();\n                path.splice(j + 1, path.length - j - 1);\n                change = true;\n            }\n            else {\n                pushedItem.$item.x = x;\n                pushedItem.$item.y = y;\n            }\n        }\n        if (path.length < 2) {\n            this.removeFromPushed(i);\n        }\n        return change;\n    }\n};\nGridsterPush.ɵfac = function GridsterPush_Factory(t) { return new (t || GridsterPush)(ɵngcc0.ɵɵinject(GridsterItemComponentInterface)); };\nGridsterPush.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GridsterPush, factory: GridsterPush.ɵfac });\nGridsterPush.ctorParameters = () => [\n    { type: GridsterItemComponentInterface }\n];\nGridsterPush = __decorate([ __metadata(\"design:paramtypes\", [GridsterItemComponentInterface])\n], GridsterPush);\n\nlet scrollSensitivity;\nlet scrollSpeed;\nconst intervalDuration = 50;\nlet gridsterElement;\nlet resizeEvent;\nlet resizeEventType;\nlet intervalE;\nlet intervalW;\nlet intervalN;\nlet intervalS;\nfunction scroll(gridster, left, top, width, height, e, lastMouse, calculateItemPosition, resize, resizeEventScrollType) {\n    scrollSensitivity = gridster.$options.scrollSensitivity;\n    scrollSpeed = gridster.$options.scrollSpeed;\n    gridsterElement = gridster.el;\n    resizeEvent = resize;\n    resizeEventType = resizeEventScrollType;\n    const offsetWidth = gridsterElement.offsetWidth;\n    const offsetHeight = gridsterElement.offsetHeight;\n    const offsetLeft = gridsterElement.scrollLeft;\n    const offsetTop = gridsterElement.scrollTop;\n    const elemTopOffset = top - offsetTop;\n    const elemBottomOffset = offsetHeight + offsetTop - top - height;\n    if (!gridster.$options.disableScrollVertical) {\n        if (lastMouse.clientY < e.clientY && elemBottomOffset < scrollSensitivity) {\n            cancelN();\n            if ((resizeEvent && resizeEventType && !resizeEventType.s) || intervalS) {\n                return;\n            }\n            intervalS = startVertical(1, calculateItemPosition, lastMouse);\n        }\n        else if (lastMouse.clientY > e.clientY && offsetTop > 0 && elemTopOffset < scrollSensitivity) {\n            cancelS();\n            if ((resizeEvent && resizeEventType && !resizeEventType.n) || intervalN) {\n                return;\n            }\n            intervalN = startVertical(-1, calculateItemPosition, lastMouse);\n        }\n        else if (lastMouse.clientY !== e.clientY) {\n            cancelVertical();\n        }\n    }\n    const elemRightOffset = offsetLeft + offsetWidth - left - width;\n    const elemLeftOffset = left - offsetLeft;\n    if (!gridster.$options.disableScrollHorizontal) {\n        if (lastMouse.clientX < e.clientX && elemRightOffset <= scrollSensitivity) {\n            cancelW();\n            if ((resizeEvent && resizeEventType && !resizeEventType.e) || intervalE) {\n                return;\n            }\n            intervalE = startHorizontal(1, calculateItemPosition, lastMouse);\n        }\n        else if (lastMouse.clientX > e.clientX && offsetLeft > 0 && elemLeftOffset < scrollSensitivity) {\n            cancelE();\n            if ((resizeEvent && resizeEventType && !resizeEventType.w) || intervalW) {\n                return;\n            }\n            intervalW = startHorizontal(-1, calculateItemPosition, lastMouse);\n        }\n        else if (lastMouse.clientX !== e.clientX) {\n            cancelHorizontal();\n        }\n    }\n}\nfunction startVertical(sign, calculateItemPosition, lastMouse) {\n    let clientY = lastMouse.clientY;\n    return setInterval(() => {\n        if (!gridsterElement || sign === -1 && gridsterElement.scrollTop - scrollSpeed < 0) {\n            cancelVertical();\n        }\n        gridsterElement.scrollTop += sign * scrollSpeed;\n        clientY += sign * scrollSpeed;\n        calculateItemPosition({ clientX: lastMouse.clientX, clientY: clientY });\n    }, intervalDuration);\n}\nfunction startHorizontal(sign, calculateItemPosition, lastMouse) {\n    let clientX = lastMouse.clientX;\n    return setInterval(() => {\n        if (!gridsterElement || sign === -1 && gridsterElement.scrollLeft - scrollSpeed < 0) {\n            cancelHorizontal();\n        }\n        gridsterElement.scrollLeft += sign * scrollSpeed;\n        clientX += sign * scrollSpeed;\n        calculateItemPosition({ clientX: clientX, clientY: lastMouse.clientY });\n    }, intervalDuration);\n}\nfunction cancelScroll() {\n    cancelHorizontal();\n    cancelVertical();\n    gridsterElement = undefined;\n}\nfunction cancelHorizontal() {\n    cancelE();\n    cancelW();\n}\nfunction cancelVertical() {\n    cancelN();\n    cancelS();\n}\nfunction cancelE() {\n    if (intervalE) {\n        clearInterval(intervalE);\n        intervalE = 0;\n    }\n}\nfunction cancelW() {\n    if (intervalW) {\n        clearInterval(intervalW);\n        intervalW = 0;\n    }\n}\nfunction cancelS() {\n    if (intervalS) {\n        clearInterval(intervalS);\n        intervalS = 0;\n    }\n}\nfunction cancelN() {\n    if (intervalN) {\n        clearInterval(intervalN);\n        intervalN = 0;\n    }\n}\n\nlet GridsterSwap = class GridsterSwap {\n    constructor(gridsterItem) {\n        this.gridsterItem = gridsterItem;\n        this.gridster = gridsterItem.gridster;\n    }\n    destroy() {\n        delete this.gridster;\n        delete this.gridsterItem;\n        delete this.swapedItem;\n    }\n    swapItems() {\n        if (this.gridster.$options.swap) {\n            this.checkSwapBack();\n            this.checkSwap(this.gridsterItem);\n        }\n    }\n    checkSwapBack() {\n        if (this.swapedItem) {\n            const x = this.swapedItem.$item.x;\n            const y = this.swapedItem.$item.y;\n            this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n            this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n            if (this.gridster.checkCollision(this.swapedItem.$item)) {\n                this.swapedItem.$item.x = x;\n                this.swapedItem.$item.y = y;\n            }\n            else {\n                this.swapedItem.setSize();\n                this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n                this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n                this.swapedItem = undefined;\n            }\n        }\n    }\n    restoreSwapItem() {\n        if (this.swapedItem) {\n            this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n            this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n            this.swapedItem.setSize();\n            this.swapedItem = undefined;\n        }\n    }\n    setSwapItem() {\n        if (this.swapedItem) {\n            this.swapedItem.checkItemChanges(this.swapedItem.$item, this.swapedItem.item);\n            this.swapedItem = undefined;\n        }\n    }\n    checkSwap(pushedBy) {\n        let gridsterItemCollision;\n        if (this.gridster.$options.swapWhileDragging) {\n            gridsterItemCollision = this.gridster.checkCollisionForSwaping(pushedBy.$item);\n        }\n        else {\n            gridsterItemCollision = this.gridster.checkCollision(pushedBy.$item);\n        }\n        if (gridsterItemCollision && gridsterItemCollision !== true && gridsterItemCollision.canBeDragged()) {\n            const gridsterItemCollide = gridsterItemCollision;\n            const copyCollisionX = gridsterItemCollide.$item.x;\n            const copyCollisionY = gridsterItemCollide.$item.y;\n            const copyX = pushedBy.$item.x;\n            const copyY = pushedBy.$item.y;\n            gridsterItemCollide.$item.x = pushedBy.item.x || 0;\n            gridsterItemCollide.$item.y = pushedBy.item.y || 0;\n            pushedBy.$item.x = gridsterItemCollide.item.x || 0;\n            pushedBy.$item.y = gridsterItemCollide.item.y || 0;\n            if (this.gridster.checkCollision(gridsterItemCollide.$item) || this.gridster.checkCollision(pushedBy.$item)) {\n                pushedBy.$item.x = copyX;\n                pushedBy.$item.y = copyY;\n                gridsterItemCollide.$item.x = copyCollisionX;\n                gridsterItemCollide.$item.y = copyCollisionY;\n            }\n            else {\n                gridsterItemCollide.setSize();\n                this.swapedItem = gridsterItemCollide;\n                if (this.gridster.$options.swapWhileDragging) {\n                    this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n                    this.setSwapItem();\n                }\n            }\n        }\n    }\n};\nGridsterSwap.ɵfac = function GridsterSwap_Factory(t) { return new (t || GridsterSwap)(ɵngcc0.ɵɵinject(GridsterItemComponentInterface)); };\nGridsterSwap.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GridsterSwap, factory: GridsterSwap.ɵfac });\nGridsterSwap.ctorParameters = () => [\n    { type: GridsterItemComponentInterface }\n];\nGridsterSwap = __decorate([ __metadata(\"design:paramtypes\", [GridsterItemComponentInterface])\n], GridsterSwap);\n\nlet GridsterDraggable = class GridsterDraggable {\n    constructor(gridsterItem, gridster, zone) {\n        this.zone = zone;\n        this.collision = false;\n        this.gridsterItem = gridsterItem;\n        this.gridster = gridster;\n        this.lastMouse = {\n            clientX: 0,\n            clientY: 0\n        };\n        this.path = [];\n    }\n    destroy() {\n        if (this.gridster.previewStyle) {\n            this.gridster.previewStyle(true);\n        }\n        delete this.gridsterItem;\n        delete this.gridster;\n        delete this.collision;\n        if (this.mousedown) {\n            this.mousedown();\n            this.touchstart();\n        }\n    }\n    dragStart(e) {\n        if (e.which && e.which !== 1) {\n            return;\n        }\n        if (this.gridster.options.draggable && this.gridster.options.draggable.start) {\n            this.gridster.options.draggable.start(this.gridsterItem.item, this.gridsterItem, e);\n        }\n        e.stopPropagation();\n        e.preventDefault();\n        this.dragFunction = this.dragMove.bind(this);\n        this.dragStopFunction = this.dragStop.bind(this);\n        this.zone.runOutsideAngular(() => {\n            this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragFunction);\n            this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragFunction);\n        });\n        this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\n        this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStopFunction);\n        this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\n        this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\n        this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\n        this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-moving');\n        this.margin = this.gridster.$options.margin;\n        this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n        this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n        this.left = this.gridsterItem.left - this.margin;\n        this.top = this.gridsterItem.top - this.margin;\n        this.originalClientX = e.clientX;\n        this.originalClientY = e.clientY;\n        this.width = this.gridsterItem.width;\n        this.height = this.gridsterItem.height;\n        if (this.gridster.$options.dirType === DirTypes.RTL) {\n            this.diffLeft = (e.clientX - this.gridster.el.scrollWidth + this.gridsterItem.left);\n        }\n        else {\n            this.diffLeft = e.clientX + this.offsetLeft - this.margin - this.left;\n        }\n        this.diffTop = e.clientY + this.offsetTop - this.margin - this.top;\n        this.gridster.movingItem = this.gridsterItem.$item;\n        this.gridster.previewStyle(true);\n        this.push = new GridsterPush(this.gridsterItem);\n        this.swap = new GridsterSwap(this.gridsterItem);\n        this.gridster.dragInProgress = true;\n        this.gridster.updateGrid();\n        this.path.push({ x: this.gridsterItem.item.x || 0, y: this.gridsterItem.item.y || 0 });\n    }\n    dragMove(e) {\n        e.stopPropagation();\n        e.preventDefault();\n        GridsterUtils.checkTouchEvent(e);\n        this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n        this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n        scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.calculateItemPositionFromMousePosition.bind(this));\n        this.calculateItemPositionFromMousePosition(e);\n    }\n    calculateItemPositionFromMousePosition(e) {\n        if (this.gridster.options.scale) {\n            this.calculateItemPositionWithScale(e, this.gridster.options.scale);\n        }\n        else {\n            this.calculateItemPositionWithoutScale(e);\n        }\n        this.calculateItemPosition();\n        this.lastMouse.clientX = e.clientX;\n        this.lastMouse.clientY = e.clientY;\n        this.zone.run(() => {\n            this.gridster.updateGrid();\n        });\n    }\n    calculateItemPositionWithScale(e, scale) {\n        this.left = this.originalClientX + ((e.clientX - this.originalClientX) / scale) + this.offsetLeft - this.diffLeft;\n        this.top = this.originalClientY + ((e.clientY - this.originalClientY) / scale) + this.offsetTop - this.diffTop;\n    }\n    calculateItemPositionWithoutScale(e) {\n        if (this.gridster.$options.dirType === DirTypes.RTL) {\n            this.left = this.gridster.el.scrollWidth - e.clientX + this.diffLeft;\n        }\n        else {\n            this.left = e.clientX + this.offsetLeft - this.diffLeft;\n        }\n        this.top = e.clientY + this.offsetTop - this.diffTop;\n    }\n    dragStop(e) {\n        e.stopPropagation();\n        e.preventDefault();\n        cancelScroll();\n        this.cancelOnBlur();\n        this.mousemove();\n        this.mouseup();\n        this.mouseleave();\n        this.touchmove();\n        this.touchend();\n        this.touchcancel();\n        this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-moving');\n        this.gridster.dragInProgress = false;\n        this.gridster.updateGrid();\n        this.path = [];\n        if (this.gridster.options.draggable && this.gridster.options.draggable.stop) {\n            Promise.resolve(this.gridster.options.draggable.stop(this.gridsterItem.item, this.gridsterItem, e))\n                .then(this.makeDrag.bind(this), this.cancelDrag.bind(this));\n        }\n        else {\n            this.makeDrag();\n        }\n        setTimeout(() => {\n            if (this.gridster) {\n                this.gridster.movingItem = null;\n                this.gridster.previewStyle(true);\n            }\n        });\n    }\n    cancelDrag() {\n        this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n        this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n        this.gridsterItem.setSize();\n        if (this.push) {\n            this.push.restoreItems();\n        }\n        if (this.swap) {\n            this.swap.restoreSwapItem();\n        }\n        if (this.push) {\n            this.push.destroy();\n            delete this.push;\n        }\n        if (this.swap) {\n            this.swap.destroy();\n            delete this.swap;\n        }\n    }\n    makeDrag() {\n        if (this.gridster.$options.draggable.dropOverItems && this.gridster.options.draggable\n            && this.gridster.options.draggable.dropOverItemsCallback\n            && this.collision && this.collision !== true && this.collision.$item) {\n            this.gridster.options.draggable.dropOverItemsCallback(this.gridsterItem.item, this.collision.item, this.gridster);\n        }\n        this.collision = false;\n        this.gridsterItem.setSize();\n        this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n        if (this.push) {\n            this.push.setPushedItems();\n        }\n        if (this.swap) {\n            this.swap.setSwapItem();\n        }\n        if (this.push) {\n            this.push.destroy();\n            delete this.push;\n        }\n        if (this.swap) {\n            this.swap.destroy();\n            delete this.swap;\n        }\n    }\n    calculateItemPosition() {\n        this.gridster.movingItem = this.gridsterItem.$item;\n        this.positionX = this.gridster.pixelsToPositionX(this.left, Math.round);\n        this.positionY = this.gridster.pixelsToPositionY(this.top, Math.round);\n        this.positionXBackup = this.gridsterItem.$item.x;\n        this.positionYBackup = this.gridsterItem.$item.y;\n        this.gridsterItem.$item.x = this.positionX;\n        if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n            this.gridsterItem.$item.x = this.positionXBackup;\n        }\n        this.gridsterItem.$item.y = this.positionY;\n        if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n            this.gridsterItem.$item.y = this.positionYBackup;\n        }\n        this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, this.left, this.top);\n        if (this.positionXBackup !== this.gridsterItem.$item.x || this.positionYBackup !== this.gridsterItem.$item.y) {\n            const lastPosition = this.path[this.path.length - 1];\n            let direction = '';\n            if (lastPosition.x < this.gridsterItem.$item.x) {\n                direction = this.push.fromWest;\n            }\n            else if (lastPosition.x > this.gridsterItem.$item.x) {\n                direction = this.push.fromEast;\n            }\n            else if (lastPosition.y < this.gridsterItem.$item.y) {\n                direction = this.push.fromNorth;\n            }\n            else if (lastPosition.y > this.gridsterItem.$item.y) {\n                direction = this.push.fromSouth;\n            }\n            this.push.pushItems(direction, this.gridster.$options.disablePushOnDrag);\n            this.swap.swapItems();\n            this.collision = this.gridster.checkCollision(this.gridsterItem.$item);\n            if (this.collision) {\n                this.gridsterItem.$item.x = this.positionXBackup;\n                this.gridsterItem.$item.y = this.positionYBackup;\n                if (this.gridster.$options.draggable.dropOverItems && this.collision !== true && this.collision.$item) {\n                    this.gridster.movingItem = null;\n                }\n            }\n            else {\n                this.path.push({ x: this.gridsterItem.$item.x, y: this.gridsterItem.$item.y });\n            }\n            this.push.checkPushBack();\n        }\n        this.gridster.previewStyle(true);\n    }\n    toggle() {\n        const enableDrag = this.gridsterItem.canBeDragged();\n        if (!this.enabled && enableDrag) {\n            this.enabled = !this.enabled;\n            this.dragStartFunction = this.dragStartDelay.bind(this);\n            this.mousedown = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'mousedown', this.dragStartFunction);\n            this.touchstart = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'touchstart', this.dragStartFunction);\n        }\n        else if (this.enabled && !enableDrag) {\n            this.enabled = !this.enabled;\n            this.mousedown();\n            this.touchstart();\n        }\n    }\n    dragStartDelay(e) {\n        if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('gridster-item-resizable-handler') > -1) {\n            return;\n        }\n        if (GridsterUtils.checkContentClassForEvent(this.gridster, e)) {\n            return;\n        }\n        GridsterUtils.checkTouchEvent(e);\n        if (!this.gridster.$options.draggable.delayStart) {\n            this.dragStart(e);\n            return;\n        }\n        const timeout = setTimeout(() => {\n            this.dragStart(e);\n            cancelDrag();\n        }, this.gridster.$options.draggable.delayStart);\n        const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n        const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\n        const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n        const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n        const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n        const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n        function cancelMove(eventMove) {\n            GridsterUtils.checkTouchEvent(eventMove);\n            if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n                cancelDrag();\n            }\n        }\n        function cancelDrag() {\n            clearTimeout(timeout);\n            cancelOnBlur();\n            cancelMouse();\n            cancelMouseLeave();\n            cancelTouchMove();\n            cancelTouchEnd();\n            cancelTouchCancel();\n        }\n    }\n};\nGridsterDraggable.ɵfac = function GridsterDraggable_Factory(t) { return new (t || GridsterDraggable)(ɵngcc0.ɵɵinject(GridsterItemComponentInterface), ɵngcc0.ɵɵinject(GridsterComponentInterface), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nGridsterDraggable.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GridsterDraggable, factory: GridsterDraggable.ɵfac });\nGridsterDraggable.ctorParameters = () => [\n    { type: GridsterItemComponentInterface },\n    { type: GridsterComponentInterface },\n    { type: NgZone }\n];\nGridsterDraggable = __decorate([ __metadata(\"design:paramtypes\", [GridsterItemComponentInterface, GridsterComponentInterface, NgZone])\n], GridsterDraggable);\n\nlet GridsterPushResize = class GridsterPushResize {\n    constructor(gridsterItem) {\n        this.pushedItems = [];\n        this.pushedItemsPath = [];\n        this.gridsterItem = gridsterItem;\n        this.gridster = gridsterItem.gridster;\n        this.tryPattern = {\n            fromEast: this.tryWest,\n            fromWest: this.tryEast,\n            fromNorth: this.trySouth,\n            fromSouth: this.tryNorth\n        };\n        this.fromSouth = 'fromSouth';\n        this.fromNorth = 'fromNorth';\n        this.fromEast = 'fromEast';\n        this.fromWest = 'fromWest';\n    }\n    destroy() {\n        delete this.gridster;\n        delete this.gridsterItem;\n    }\n    pushItems(direction) {\n        if (this.gridster.$options.pushResizeItems) {\n            return this.push(this.gridsterItem, direction);\n        }\n        else {\n            return false;\n        }\n    }\n    restoreItems() {\n        let i = 0;\n        const l = this.pushedItems.length;\n        let pushedItem;\n        for (; i < l; i++) {\n            pushedItem = this.pushedItems[i];\n            pushedItem.$item.x = pushedItem.item.x || 0;\n            pushedItem.$item.y = pushedItem.item.y || 0;\n            pushedItem.$item.cols = pushedItem.item.cols || 1;\n            pushedItem.$item.row = pushedItem.item.row || 1;\n            pushedItem.setSize();\n        }\n        this.pushedItems = [];\n        this.pushedItemsPath = [];\n    }\n    setPushedItems() {\n        let i = 0;\n        const l = this.pushedItems.length;\n        let pushedItem;\n        for (; i < l; i++) {\n            pushedItem = this.pushedItems[i];\n            pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n        }\n        this.pushedItems = [];\n        this.pushedItemsPath = [];\n    }\n    checkPushBack() {\n        let i = this.pushedItems.length - 1;\n        let change = false;\n        for (; i > -1; i--) {\n            if (this.checkPushedItem(this.pushedItems[i], i)) {\n                change = true;\n            }\n        }\n        if (change) {\n            this.checkPushBack();\n        }\n    }\n    push(gridsterItem, direction) {\n        const gridsterItemCollision = this.gridster.checkCollision(gridsterItem.$item);\n        if (gridsterItemCollision && gridsterItemCollision !== true &&\n            gridsterItemCollision !== this.gridsterItem && gridsterItemCollision.canBeResized()) {\n            if (this.tryPattern[direction].call(this, gridsterItemCollision, gridsterItem, direction)) {\n                return true;\n            }\n        }\n        else if (gridsterItemCollision === false) {\n            return true;\n        }\n        return false;\n    }\n    trySouth(gridsterItemCollide, gridsterItem, direction) {\n        const backUpY = gridsterItemCollide.$item.y;\n        const backUpRows = gridsterItemCollide.$item.rows;\n        gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n        gridsterItemCollide.$item.rows = backUpRows + backUpY - gridsterItemCollide.$item.y;\n        if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n            && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n            gridsterItemCollide.setSize();\n            this.addToPushed(gridsterItemCollide);\n            this.push(gridsterItem, direction);\n            return true;\n        }\n        else {\n            gridsterItemCollide.$item.y = backUpY;\n            gridsterItemCollide.$item.rows = backUpRows;\n        }\n        return false;\n    }\n    tryNorth(gridsterItemCollide, gridsterItem, direction) {\n        const backUpRows = gridsterItemCollide.$item.rows;\n        gridsterItemCollide.$item.rows = gridsterItem.$item.y - gridsterItemCollide.$item.y;\n        if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n            && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n            gridsterItemCollide.setSize();\n            this.addToPushed(gridsterItemCollide);\n            this.push(gridsterItem, direction);\n            return true;\n        }\n        else {\n            gridsterItemCollide.$item.rows = backUpRows;\n        }\n        return false;\n    }\n    tryEast(gridsterItemCollide, gridsterItem, direction) {\n        const backUpX = gridsterItemCollide.$item.x;\n        const backUpCols = gridsterItemCollide.$item.cols;\n        gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n        gridsterItemCollide.$item.cols = backUpCols + backUpX - gridsterItemCollide.$item.x;\n        if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n            && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n            gridsterItemCollide.setSize();\n            this.addToPushed(gridsterItemCollide);\n            this.push(gridsterItem, direction);\n            return true;\n        }\n        else {\n            gridsterItemCollide.$item.x = backUpX;\n            gridsterItemCollide.$item.cols = backUpCols;\n        }\n        return false;\n    }\n    tryWest(gridsterItemCollide, gridsterItem, direction) {\n        const backUpCols = gridsterItemCollide.$item.cols;\n        gridsterItemCollide.$item.cols = gridsterItem.$item.x - gridsterItemCollide.$item.x;\n        if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n            && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n            gridsterItemCollide.setSize();\n            this.addToPushed(gridsterItemCollide);\n            this.push(gridsterItem, direction);\n            return true;\n        }\n        else {\n            gridsterItemCollide.$item.cols = backUpCols;\n        }\n        return false;\n    }\n    addToPushed(gridsterItem) {\n        if (this.pushedItems.indexOf(gridsterItem) < 0) {\n            this.pushedItems.push(gridsterItem);\n            this.pushedItemsPath.push([\n                {\n                    x: gridsterItem.item.x || 0,\n                    y: gridsterItem.item.y || 0,\n                    cols: gridsterItem.item.cols || 0,\n                    rows: gridsterItem.item.rows || 0\n                },\n                {\n                    x: gridsterItem.$item.x,\n                    y: gridsterItem.$item.y,\n                    cols: gridsterItem.$item.cols,\n                    rows: gridsterItem.$item.rows\n                }\n            ]);\n        }\n        else {\n            const i = this.pushedItems.indexOf(gridsterItem);\n            this.pushedItemsPath[i].push({\n                x: gridsterItem.$item.x,\n                y: gridsterItem.$item.y,\n                cols: gridsterItem.$item.cols,\n                rows: gridsterItem.$item.rows\n            });\n        }\n    }\n    removeFromPushed(i) {\n        if (i > -1) {\n            this.pushedItems.splice(i, 1);\n            this.pushedItemsPath.splice(i, 1);\n        }\n    }\n    checkPushedItem(pushedItem, i) {\n        const path = this.pushedItemsPath[i];\n        let j = path.length - 2;\n        let lastPosition, x, y, cols, rows;\n        for (; j > -1; j--) {\n            lastPosition = path[j];\n            x = pushedItem.$item.x;\n            y = pushedItem.$item.y;\n            cols = pushedItem.$item.cols;\n            rows = pushedItem.$item.rows;\n            pushedItem.$item.x = lastPosition.x;\n            pushedItem.$item.y = lastPosition.y;\n            pushedItem.$item.cols = lastPosition.cols;\n            pushedItem.$item.rows = lastPosition.rows;\n            if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n                pushedItem.setSize();\n                path.splice(j + 1, path.length - 1 - j);\n            }\n            else {\n                pushedItem.$item.x = x;\n                pushedItem.$item.y = y;\n                pushedItem.$item.cols = cols;\n                pushedItem.$item.rows = rows;\n            }\n        }\n        if (path.length < 2) {\n            this.removeFromPushed(i);\n            return true;\n        }\n        return false;\n    }\n};\nGridsterPushResize.ɵfac = function GridsterPushResize_Factory(t) { return new (t || GridsterPushResize)(ɵngcc0.ɵɵinject(GridsterItemComponentInterface)); };\nGridsterPushResize.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GridsterPushResize, factory: GridsterPushResize.ɵfac });\nGridsterPushResize.ctorParameters = () => [\n    { type: GridsterItemComponentInterface }\n];\nGridsterPushResize = __decorate([ __metadata(\"design:paramtypes\", [GridsterItemComponentInterface])\n], GridsterPushResize);\n\nlet GridsterResizable = class GridsterResizable {\n    constructor(gridsterItem, gridster, zone) {\n        this.zone = zone;\n        this.gridsterItem = gridsterItem;\n        this.gridster = gridster;\n        this.lastMouse = {\n            clientX: 0,\n            clientY: 0\n        };\n        this.itemBackup = [0, 0, 0, 0];\n        this.resizeEventScrollType = { w: false, e: false, n: false, s: false };\n    }\n    destroy() {\n        if (this.gridster.previewStyle) {\n            this.gridster.previewStyle();\n        }\n        delete this.gridsterItem;\n        delete this.gridster;\n    }\n    dragStart(e) {\n        if (e.which && e.which !== 1) {\n            return;\n        }\n        if (this.gridster.options.resizable && this.gridster.options.resizable.start) {\n            this.gridster.options.resizable.start(this.gridsterItem.item, this.gridsterItem, e);\n        }\n        e.stopPropagation();\n        e.preventDefault();\n        this.dragFunction = this.dragMove.bind(this);\n        this.dragStopFunction = this.dragStop.bind(this);\n        this.zone.runOutsideAngular(() => {\n            this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragFunction);\n            this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragFunction);\n        });\n        this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\n        this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStopFunction);\n        this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\n        this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\n        this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\n        this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-resizing');\n        this.lastMouse.clientX = e.clientX;\n        this.lastMouse.clientY = e.clientY;\n        this.left = this.gridsterItem.left;\n        this.top = this.gridsterItem.top;\n        this.width = this.gridsterItem.width;\n        this.height = this.gridsterItem.height;\n        this.bottom = this.gridsterItem.top + this.gridsterItem.height;\n        this.right = this.gridsterItem.left + this.gridsterItem.width;\n        this.margin = this.gridster.$options.margin;\n        this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n        this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n        this.diffLeft = e.clientX + this.offsetLeft - this.left;\n        this.diffRight = e.clientX + this.offsetLeft - this.right;\n        this.diffTop = e.clientY + this.offsetTop - this.top;\n        this.diffBottom = e.clientY + this.offsetTop - this.bottom;\n        this.minHeight = this.gridster.positionYToPixels(this.gridsterItem.$item.minItemRows || this.gridster.$options.minItemRows)\n            - this.margin;\n        this.minWidth = this.gridster.positionXToPixels(this.gridsterItem.$item.minItemCols || this.gridster.$options.minItemCols)\n            - this.margin;\n        this.gridster.movingItem = this.gridsterItem.$item;\n        this.gridster.previewStyle();\n        this.push = new GridsterPush(this.gridsterItem);\n        this.pushResize = new GridsterPushResize(this.gridsterItem);\n        this.gridster.dragInProgress = true;\n        this.gridster.updateGrid();\n        if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-n') > -1) {\n            this.resizeEventScrollType.n = true;\n            this.directionFunction = this.handleN;\n        }\n        else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-w') > -1) {\n            if (this.gridster.$options.dirType === DirTypes.RTL) {\n                this.resizeEventScrollType.e = true;\n                this.directionFunction = this.handleE;\n            }\n            else {\n                this.resizeEventScrollType.w = true;\n                this.directionFunction = this.handleW;\n            }\n        }\n        else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-s') > -1) {\n            this.resizeEventScrollType.s = true;\n            this.directionFunction = this.handleS;\n        }\n        else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-e') > -1) {\n            if (this.gridster.$options.dirType === DirTypes.RTL) {\n                this.resizeEventScrollType.w = true;\n                this.directionFunction = this.handleW;\n            }\n            else {\n                this.resizeEventScrollType.e = true;\n                this.directionFunction = this.handleE;\n            }\n        }\n        else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-nw') > -1) {\n            if (this.gridster.$options.dirType === DirTypes.RTL) {\n                this.resizeEventScrollType.n = true;\n                this.resizeEventScrollType.e = true;\n                this.directionFunction = this.handleNE;\n            }\n            else {\n                this.resizeEventScrollType.n = true;\n                this.resizeEventScrollType.w = true;\n                this.directionFunction = this.handleNW;\n            }\n        }\n        else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-ne') > -1) {\n            if (this.gridster.$options.dirType === DirTypes.RTL) {\n                this.resizeEventScrollType.n = true;\n                this.resizeEventScrollType.w = true;\n                this.directionFunction = this.handleNW;\n            }\n            else {\n                this.resizeEventScrollType.n = true;\n                this.resizeEventScrollType.e = true;\n                this.directionFunction = this.handleNE;\n            }\n        }\n        else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-sw') > -1) {\n            if (this.gridster.$options.dirType === DirTypes.RTL) {\n                this.resizeEventScrollType.s = true;\n                this.resizeEventScrollType.e = true;\n                this.directionFunction = this.handleSE;\n            }\n            else {\n                this.resizeEventScrollType.s = true;\n                this.resizeEventScrollType.w = true;\n                this.directionFunction = this.handleSW;\n            }\n        }\n        else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-se') > -1) {\n            if (this.gridster.$options.dirType === DirTypes.RTL) {\n                this.resizeEventScrollType.s = true;\n                this.resizeEventScrollType.w = true;\n                this.directionFunction = this.handleSW;\n            }\n            else {\n                this.resizeEventScrollType.s = true;\n                this.resizeEventScrollType.e = true;\n                this.directionFunction = this.handleSE;\n            }\n        }\n    }\n    dragMove(e) {\n        e.stopPropagation();\n        e.preventDefault();\n        GridsterUtils.checkTouchEvent(e);\n        this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n        this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n        scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.directionFunction.bind(this), true, this.resizeEventScrollType);\n        this.directionFunction(e);\n        this.lastMouse.clientX = e.clientX;\n        this.lastMouse.clientY = e.clientY;\n        this.zone.run(() => {\n            this.gridster.updateGrid();\n        });\n    }\n    dragStop(e) {\n        e.stopPropagation();\n        e.preventDefault();\n        cancelScroll();\n        this.mousemove();\n        this.mouseup();\n        this.mouseleave();\n        this.cancelOnBlur();\n        this.touchmove();\n        this.touchend();\n        this.touchcancel();\n        this.gridster.dragInProgress = false;\n        this.gridster.updateGrid();\n        if (this.gridster.options.resizable && this.gridster.options.resizable.stop) {\n            Promise.resolve(this.gridster.options.resizable.stop(this.gridsterItem.item, this.gridsterItem, e))\n                .then(this.makeResize.bind(this), this.cancelResize.bind(this));\n        }\n        else {\n            this.makeResize();\n        }\n        setTimeout(() => {\n            this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-resizing');\n            if (this.gridster) {\n                this.gridster.movingItem = null;\n                this.gridster.previewStyle();\n            }\n        });\n    }\n    cancelResize() {\n        this.gridsterItem.$item.cols = this.gridsterItem.item.cols || 1;\n        this.gridsterItem.$item.rows = this.gridsterItem.item.rows || 1;\n        this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n        this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n        this.gridsterItem.setSize();\n        this.push.restoreItems();\n        this.pushResize.restoreItems();\n        this.push.destroy();\n        delete this.push;\n        this.pushResize.destroy();\n        delete this.pushResize;\n    }\n    makeResize() {\n        this.gridsterItem.setSize();\n        this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n        this.push.setPushedItems();\n        this.pushResize.setPushedItems();\n        this.push.destroy();\n        delete this.push;\n        this.pushResize.destroy();\n        delete this.pushResize;\n    }\n    handleN(e) {\n        this.top = e.clientY + this.offsetTop - this.diffTop;\n        this.height = this.bottom - this.top;\n        if (this.minHeight > this.height) {\n            this.height = this.minHeight;\n            this.top = this.bottom - this.minHeight;\n        }\n        this.newPosition = this.gridster.pixelsToPositionY(this.top + this.margin, Math.floor);\n        if (this.gridsterItem.$item.y !== this.newPosition) {\n            this.itemBackup[1] = this.gridsterItem.$item.y;\n            this.itemBackup[3] = this.gridsterItem.$item.rows;\n            this.gridsterItem.$item.rows += this.gridsterItem.$item.y - this.newPosition;\n            this.gridsterItem.$item.y = this.newPosition;\n            this.pushResize.pushItems(this.pushResize.fromSouth);\n            this.push.pushItems(this.push.fromSouth, this.gridster.$options.disablePushOnResize);\n            if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n                this.gridsterItem.$item.y = this.itemBackup[1];\n                this.gridsterItem.$item.rows = this.itemBackup[3];\n                this.setItemTop(this.gridster.positionYToPixels(this.gridsterItem.$item.y));\n                this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n                return;\n            }\n            else {\n                this.gridster.previewStyle();\n            }\n            this.pushResize.checkPushBack();\n            this.push.checkPushBack();\n        }\n        this.setItemTop(this.top);\n        this.setItemHeight(this.height);\n    }\n    handleW(e) {\n        this.left = e.clientX + this.offsetLeft - this.diffLeft;\n        this.width = this.right - this.left;\n        if (this.minWidth > this.width) {\n            this.width = this.minWidth;\n            this.left = this.right - this.minWidth;\n        }\n        this.newPosition = this.gridster.pixelsToPositionX(this.left + this.margin, Math.floor);\n        if (this.gridsterItem.$item.x !== this.newPosition) {\n            this.itemBackup[0] = this.gridsterItem.$item.x;\n            this.itemBackup[2] = this.gridsterItem.$item.cols;\n            this.gridsterItem.$item.cols += this.gridsterItem.$item.x - this.newPosition;\n            this.gridsterItem.$item.x = this.newPosition;\n            this.pushResize.pushItems(this.pushResize.fromEast);\n            this.push.pushItems(this.push.fromEast, this.gridster.$options.disablePushOnResize);\n            if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n                this.gridsterItem.$item.x = this.itemBackup[0];\n                this.gridsterItem.$item.cols = this.itemBackup[2];\n                this.setItemLeft(this.gridster.positionXToPixels(this.gridsterItem.$item.x));\n                this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n                return;\n            }\n            else {\n                this.gridster.previewStyle();\n            }\n            this.pushResize.checkPushBack();\n            this.push.checkPushBack();\n        }\n        this.setItemLeft(this.left);\n        this.setItemWidth(this.width);\n    }\n    handleS(e) {\n        this.height = e.clientY + this.offsetTop - this.diffBottom - this.top;\n        if (this.minHeight > this.height) {\n            this.height = this.minHeight;\n        }\n        this.bottom = this.top + this.height;\n        this.newPosition = this.gridster.pixelsToPositionY(this.bottom, Math.ceil);\n        if ((this.gridsterItem.$item.y + this.gridsterItem.$item.rows) !== this.newPosition) {\n            this.itemBackup[3] = this.gridsterItem.$item.rows;\n            this.gridsterItem.$item.rows = this.newPosition - this.gridsterItem.$item.y;\n            this.pushResize.pushItems(this.pushResize.fromNorth);\n            this.push.pushItems(this.push.fromNorth, this.gridster.$options.disablePushOnResize);\n            if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n                this.gridsterItem.$item.rows = this.itemBackup[3];\n                this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n                return;\n            }\n            else {\n                this.gridster.previewStyle();\n            }\n            this.pushResize.checkPushBack();\n            this.push.checkPushBack();\n        }\n        this.setItemHeight(this.height);\n    }\n    handleE(e) {\n        this.width = e.clientX + this.offsetLeft - this.diffRight - this.left;\n        if (this.minWidth > this.width) {\n            this.width = this.minWidth;\n        }\n        this.right = this.left + this.width;\n        this.newPosition = this.gridster.pixelsToPositionX(this.right, Math.ceil);\n        if ((this.gridsterItem.$item.x + this.gridsterItem.$item.cols) !== this.newPosition) {\n            this.itemBackup[2] = this.gridsterItem.$item.cols;\n            this.gridsterItem.$item.cols = this.newPosition - this.gridsterItem.$item.x;\n            this.pushResize.pushItems(this.pushResize.fromWest);\n            this.push.pushItems(this.push.fromWest, this.gridster.$options.disablePushOnResize);\n            if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n                this.gridsterItem.$item.cols = this.itemBackup[2];\n                this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n                return;\n            }\n            else {\n                this.gridster.previewStyle();\n            }\n            this.pushResize.checkPushBack();\n            this.push.checkPushBack();\n        }\n        this.setItemWidth(this.width);\n    }\n    handleNW(e) {\n        this.handleN(e);\n        this.handleW(e);\n    }\n    handleNE(e) {\n        this.handleN(e);\n        this.handleE(e);\n    }\n    handleSW(e) {\n        this.handleS(e);\n        this.handleW(e);\n    }\n    handleSE(e) {\n        this.handleS(e);\n        this.handleE(e);\n    }\n    toggle() {\n        this.resizeEnabled = this.gridsterItem.canBeResized();\n    }\n    dragStartDelay(e) {\n        GridsterUtils.checkTouchEvent(e);\n        if (!this.gridster.$options.resizable.delayStart) {\n            this.dragStart(e);\n            return;\n        }\n        const timeout = setTimeout(() => {\n            this.dragStart(e);\n            cancelDrag();\n        }, this.gridster.$options.resizable.delayStart);\n        const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n        const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\n        const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n        const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n        const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n        const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n        function cancelMove(eventMove) {\n            GridsterUtils.checkTouchEvent(eventMove);\n            if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n                cancelDrag();\n            }\n        }\n        function cancelDrag() {\n            clearTimeout(timeout);\n            cancelOnBlur();\n            cancelMouse();\n            cancelMouseLeave();\n            cancelTouchMove();\n            cancelTouchEnd();\n            cancelTouchCancel();\n        }\n    }\n    setItemTop(top) {\n        this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, this.left, top);\n    }\n    setItemLeft(left) {\n        this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, left, this.top);\n    }\n    setItemHeight(height) {\n        this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'height', height + 'px');\n    }\n    setItemWidth(width) {\n        this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'width', width + 'px');\n    }\n};\nGridsterResizable.ɵfac = function GridsterResizable_Factory(t) { return new (t || GridsterResizable)(ɵngcc0.ɵɵinject(GridsterItemComponentInterface), ɵngcc0.ɵɵinject(GridsterComponentInterface), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nGridsterResizable.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GridsterResizable, factory: GridsterResizable.ɵfac });\nGridsterResizable.ctorParameters = () => [\n    { type: GridsterItemComponentInterface },\n    { type: GridsterComponentInterface },\n    { type: NgZone }\n];\nGridsterResizable = __decorate([ __metadata(\"design:paramtypes\", [GridsterItemComponentInterface, GridsterComponentInterface, NgZone])\n], GridsterResizable);\n\nlet GridsterItemComponent = class GridsterItemComponent {\n    constructor(el, gridster, renderer, zone) {\n        this.renderer = renderer;\n        this.zone = zone;\n        this.el = el.nativeElement;\n        this.$item = {\n            cols: -1,\n            rows: -1,\n            x: -1,\n            y: -1,\n        };\n        this.gridster = gridster;\n        this.drag = new GridsterDraggable(this, gridster, this.zone);\n        this.resize = new GridsterResizable(this, gridster, this.zone);\n    }\n    get zIndex() {\n        return this.getLayerIndex() + this.gridster.$options.baseLayerIndex;\n    }\n    ngOnInit() {\n        this.updateOptions();\n        this.gridster.addItem(this);\n    }\n    updateOptions() {\n        this.$item = GridsterUtils.merge(this.$item, this.item, {\n            cols: undefined,\n            rows: undefined,\n            x: undefined,\n            y: undefined,\n            layerIndex: undefined,\n            dragEnabled: undefined,\n            resizeEnabled: undefined,\n            compactEnabled: undefined,\n            maxItemRows: undefined,\n            minItemRows: undefined,\n            maxItemCols: undefined,\n            minItemCols: undefined,\n            maxItemArea: undefined,\n            minItemArea: undefined,\n        });\n    }\n    ngOnDestroy() {\n        this.gridster.removeItem(this);\n        delete this.gridster;\n        this.drag.destroy();\n        delete this.drag;\n        this.resize.destroy();\n        delete this.resize;\n    }\n    setSize() {\n        this.renderer.setStyle(this.el, 'display', this.notPlaced ? '' : 'block');\n        this.gridster.gridRenderer.updateItem(this.el, this.$item, this.renderer);\n        this.updateItemSize();\n    }\n    updateItemSize() {\n        const top = this.$item.y * this.gridster.curRowHeight;\n        const left = this.$item.x * this.gridster.curColWidth;\n        const width = this.$item.cols * this.gridster.curColWidth - this.gridster.$options.margin;\n        const height = this.$item.rows * this.gridster.curRowHeight - this.gridster.$options.margin;\n        if (!this.init && width > 0 && height > 0) {\n            this.init = true;\n            if (this.item.initCallback) {\n                this.item.initCallback(this.item, this);\n            }\n            if (this.gridster.options.itemInitCallback) {\n                this.gridster.options.itemInitCallback(this.item, this);\n            }\n            if (this.gridster.$options.scrollToNewItems) {\n                this.el.scrollIntoView(false);\n            }\n        }\n        if (width !== this.width || height !== this.height) {\n            this.width = width;\n            this.height = height;\n            if (this.gridster.options.itemResizeCallback) {\n                this.gridster.options.itemResizeCallback(this.item, this);\n            }\n        }\n        this.top = top;\n        this.left = left;\n    }\n    itemChanged() {\n        if (this.gridster.options.itemChangeCallback) {\n            this.gridster.options.itemChangeCallback(this.item, this);\n        }\n    }\n    checkItemChanges(newValue, oldValue) {\n        if (newValue.rows === oldValue.rows && newValue.cols === oldValue.cols && newValue.x === oldValue.x && newValue.y === oldValue.y) {\n            return;\n        }\n        if (this.gridster.checkCollision(this.$item)) {\n            this.$item.x = oldValue.x || 0;\n            this.$item.y = oldValue.y || 0;\n            this.$item.cols = oldValue.cols || 1;\n            this.$item.rows = oldValue.rows || 1;\n            this.setSize();\n        }\n        else {\n            this.item.cols = this.$item.cols;\n            this.item.rows = this.$item.rows;\n            this.item.x = this.$item.x;\n            this.item.y = this.$item.y;\n            this.gridster.calculateLayoutDebounce();\n            this.itemChanged();\n        }\n    }\n    canBeDragged() {\n        return !this.gridster.mobile &&\n            (this.$item.dragEnabled === undefined ? this.gridster.$options.draggable.enabled : this.$item.dragEnabled);\n    }\n    canBeResized() {\n        return !this.gridster.mobile &&\n            (this.$item.resizeEnabled === undefined ? this.gridster.$options.resizable.enabled : this.$item.resizeEnabled);\n    }\n    bringToFront(offset) {\n        if (offset && offset <= 0) {\n            return;\n        }\n        const layerIndex = this.getLayerIndex();\n        const topIndex = this.gridster.$options.maxLayerIndex;\n        if (layerIndex < topIndex) {\n            const targetIndex = offset ? layerIndex + offset : topIndex;\n            this.item.layerIndex = this.$item.layerIndex = targetIndex > topIndex ? topIndex : targetIndex;\n        }\n    }\n    sendToBack(offset) {\n        if (offset && offset <= 0) {\n            return;\n        }\n        const layerIndex = this.getLayerIndex();\n        if (layerIndex > 0) {\n            const targetIndex = offset ? layerIndex - offset : 0;\n            this.item.layerIndex = this.$item.layerIndex = targetIndex < 0 ? 0 : targetIndex;\n        }\n    }\n    getLayerIndex() {\n        if (this.item.layerIndex !== undefined) {\n            return this.item.layerIndex;\n        }\n        if (this.gridster.$options.defaultLayerIndex !== undefined) {\n            return this.gridster.$options.defaultLayerIndex;\n        }\n        return 0;\n    }\n};\nGridsterItemComponent.ɵfac = function GridsterItemComponent_Factory(t) { return new (t || GridsterItemComponent)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(GridsterComponent), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(NgZone)); };\nGridsterItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: GridsterItemComponent, selectors: [[\"gridster-item\"]], hostVars: 2, hostBindings: function GridsterItemComponent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"z-index\", ctx.zIndex);\n    } }, inputs: { item: \"item\" }, ngContentSelectors: _c0, decls: 9, vars: 8, consts: [[\"class\", \"gridster-item-resizable-handler handle-s\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-e\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-n\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-w\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-se\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-ne\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-sw\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [\"class\", \"gridster-item-resizable-handler handle-nw\", 3, \"mousedown\", \"touchstart\", 4, \"ngIf\"], [1, \"gridster-item-resizable-handler\", \"handle-s\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-e\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-n\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-w\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-se\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-ne\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-sw\", 3, \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-nw\", 3, \"mousedown\", \"touchstart\"]], template: function GridsterItemComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵtemplate(1, GridsterItemComponent_div_1_Template, 1, 0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(2, GridsterItemComponent_div_2_Template, 1, 0, \"div\", 1);\n        ɵngcc0.ɵɵtemplate(3, GridsterItemComponent_div_3_Template, 1, 0, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(4, GridsterItemComponent_div_4_Template, 1, 0, \"div\", 3);\n        ɵngcc0.ɵɵtemplate(5, GridsterItemComponent_div_5_Template, 1, 0, \"div\", 4);\n        ɵngcc0.ɵɵtemplate(6, GridsterItemComponent_div_6_Template, 1, 0, \"div\", 5);\n        ɵngcc0.ɵɵtemplate(7, GridsterItemComponent_div_7_Template, 1, 0, \"div\", 6);\n        ɵngcc0.ɵɵtemplate(8, GridsterItemComponent_div_8_Template, 1, 0, \"div\", 7);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.s && ctx.resize.resizeEnabled);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.e && ctx.resize.resizeEnabled);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.n && ctx.resize.resizeEnabled);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.w && ctx.resize.resizeEnabled);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.se && ctx.resize.resizeEnabled);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.ne && ctx.resize.resizeEnabled);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.sw && ctx.resize.resizeEnabled);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.gridster.$options.resizable.handles.nw && ctx.resize.resizeEnabled);\n    } }, directives: [ɵngcc1.NgIf], styles: [\"gridster-item{box-sizing:border-box;z-index:1;position:absolute;overflow:hidden;transition:.3s;display:none;background:#fff;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text}gridster-item.gridster-item-moving{cursor:move}gridster-item.gridster-item-moving,gridster-item.gridster-item-resizing{transition:none;z-index:2;box-shadow:0 0 5px 5px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.gridster-item-resizable-handler{position:absolute;z-index:2}.gridster-item-resizable-handler.handle-n{cursor:ns-resize;height:10px;right:0;top:0;left:0}.gridster-item-resizable-handler.handle-e{cursor:ew-resize;width:10px;bottom:0;right:0;top:0}.gridster-item-resizable-handler.handle-s{cursor:ns-resize;height:10px;right:0;bottom:0;left:0}.gridster-item-resizable-handler.handle-w{cursor:ew-resize;width:10px;left:0;top:0;bottom:0}.gridster-item-resizable-handler.handle-ne{cursor:ne-resize;width:10px;height:10px;right:0;top:0}.gridster-item-resizable-handler.handle-nw{cursor:nw-resize;width:10px;height:10px;left:0;top:0}.gridster-item-resizable-handler.handle-se{cursor:se-resize;width:0;height:0;right:0;bottom:0;border-style:solid;border-width:0 0 10px 10px;border-color:transparent}.gridster-item-resizable-handler.handle-sw{cursor:sw-resize;width:10px;height:10px;left:0;bottom:0}gridster-item:hover .gridster-item-resizable-handler.handle-se{border-color:transparent transparent #ccc}\"], encapsulation: 2 });\nGridsterItemComponent.ctorParameters = () => [\n    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },\n    { type: GridsterComponent },\n    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },\n    { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] }\n];\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Object)\n], GridsterItemComponent.prototype, \"item\", void 0);\n__decorate([\n    HostBinding('style.z-index'),\n    __metadata(\"design:type\", Number),\n    __metadata(\"design:paramtypes\", [])\n], GridsterItemComponent.prototype, \"zIndex\", null);\nGridsterItemComponent = __decorate([ __param(0, Inject(ElementRef)), __param(2, Inject(Renderer2)), __param(3, Inject(NgZone)),\n    __metadata(\"design:paramtypes\", [ElementRef, GridsterComponent, Renderer2, NgZone])\n], GridsterItemComponent);\n\nlet GridsterPreviewComponent = class GridsterPreviewComponent {\n    constructor(el, gridster, renderer) {\n        this.renderer = renderer;\n        this.el = el.nativeElement;\n        this.gridster = gridster;\n        this.gridster.previewStyle = this.previewStyle.bind(this);\n    }\n    ngOnDestroy() {\n        delete this.el;\n        delete this.gridster.previewStyle;\n        delete this.gridster;\n    }\n    previewStyle(drag) {\n        if (!this.gridster.movingItem) {\n            this.renderer.setStyle(this.el, 'display', '');\n        }\n        else {\n            if (this.gridster.compact && drag) {\n                this.gridster.compact.checkCompactItem(this.gridster.movingItem);\n            }\n            this.renderer.setStyle(this.el, 'display', 'block');\n            this.gridster.gridRenderer.updateItem(this.el, this.gridster.movingItem, this.renderer);\n        }\n    }\n};\nGridsterPreviewComponent.ɵfac = function GridsterPreviewComponent_Factory(t) { return new (t || GridsterPreviewComponent)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(GridsterComponent), ɵngcc0.ɵɵdirectiveInject(Renderer2)); };\nGridsterPreviewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: GridsterPreviewComponent, selectors: [[\"gridster-preview\"]], decls: 0, vars: 0, template: function GridsterPreviewComponent_Template(rf, ctx) { }, styles: [\"gridster-preview{position:absolute;display:none;background:rgba(0,0,0,.15)}\"], encapsulation: 2 });\nGridsterPreviewComponent.ctorParameters = () => [\n    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },\n    { type: GridsterComponent },\n    { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] }\n];\nGridsterPreviewComponent = __decorate([ __param(0, Inject(ElementRef)), __param(2, Inject(Renderer2)),\n    __metadata(\"design:paramtypes\", [ElementRef, GridsterComponent, Renderer2])\n], GridsterPreviewComponent);\n\nlet GridsterModule = class GridsterModule {\n};\nGridsterModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: GridsterModule });\nGridsterModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function GridsterModule_Factory(t) { return new (t || GridsterModule)(); }, providers: [], imports: [[\n            CommonModule\n        ]] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GridsterCompact, [{\n        type: Injectable\n    }], function () { return [{ type: GridsterComponentInterface }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GridsterUtils, [{\n        type: Injectable\n    }], null, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GridsterEmptyCell, [{\n        type: Injectable\n    }], function () { return [{ type: GridsterComponentInterface }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GridsterRenderer, [{\n        type: Injectable\n    }], function () { return [{ type: GridsterComponentInterface }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GridsterComponent, [{\n        type: Component,\n        args: [{\n                selector: 'gridster',\n                template: \"<div class=\\\"gridster-column\\\" *ngFor=\\\"let column of gridColumns; let i = index;\\\"\\n     [ngStyle]=\\\"gridRenderer.getGridColumnStyle(i)\\\"></div>\\n<div class=\\\"gridster-row\\\" *ngFor=\\\"let row of gridRows; let i = index;\\\"\\n     [ngStyle]=\\\"gridRenderer.getGridRowStyle(i)\\\"></div>\\n<ng-content></ng-content>\\n<gridster-preview class=\\\"gridster-preview\\\"></gridster-preview>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                styles: [\"gridster{position:relative;box-sizing:border-box;background:grey;width:100%;height:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:block}gridster.fit{overflow-x:hidden;overflow-y:hidden}gridster.scrollVertical{overflow-x:hidden;overflow-y:auto}gridster.scrollHorizontal{overflow-x:auto;overflow-y:hidden}gridster.fixed{overflow:auto}gridster.mobile{overflow-x:hidden;overflow-y:auto}gridster.mobile gridster-item{position:relative}gridster .gridster-column,gridster .gridster-row{position:absolute;display:none;transition:.3s;box-sizing:border-box}gridster.display-grid .gridster-column,gridster.display-grid .gridster-row{display:block}gridster .gridster-column{border-left:1px solid #fff;border-right:1px solid #fff}gridster .gridster-row{border-top:1px solid #fff;border-bottom:1px solid #fff}\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef, decorators: [{\n                type: Inject,\n                args: [ElementRef]\n            }] }, { type: ɵngcc0.Renderer2, decorators: [{\n                type: Inject,\n                args: [Renderer2]\n            }] }, { type: ɵngcc0.ChangeDetectorRef, decorators: [{\n                type: Inject,\n                args: [ChangeDetectorRef]\n            }] }, { type: ɵngcc0.NgZone, decorators: [{\n                type: Inject,\n                args: [NgZone]\n            }] }]; }, { options: [{\n            type: Input\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GridsterPush, [{\n        type: Injectable\n    }], function () { return [{ type: GridsterItemComponentInterface }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GridsterSwap, [{\n        type: Injectable\n    }], function () { return [{ type: GridsterItemComponentInterface }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GridsterDraggable, [{\n        type: Injectable\n    }], function () { return [{ type: GridsterItemComponentInterface }, { type: GridsterComponentInterface }, { type: ɵngcc0.NgZone }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GridsterPushResize, [{\n        type: Injectable\n    }], function () { return [{ type: GridsterItemComponentInterface }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GridsterResizable, [{\n        type: Injectable\n    }], function () { return [{ type: GridsterItemComponentInterface }, { type: GridsterComponentInterface }, { type: ɵngcc0.NgZone }]; }, null); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GridsterItemComponent, [{\n        type: Component,\n        args: [{\n                selector: 'gridster-item',\n                template: \"<ng-content></ng-content>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     *ngIf=\\\"gridster.$options.resizable.handles.s && resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-s\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     *ngIf=\\\"gridster.$options.resizable.handles.e && resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-e\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     *ngIf=\\\"gridster.$options.resizable.handles.n && resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-n\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     *ngIf=\\\"gridster.$options.resizable.handles.w && resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-w\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     *ngIf=\\\"gridster.$options.resizable.handles.se && resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-se\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     *ngIf=\\\"gridster.$options.resizable.handles.ne && resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-ne\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     *ngIf=\\\"gridster.$options.resizable.handles.sw && resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-sw\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     *ngIf=\\\"gridster.$options.resizable.handles.nw && resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-nw\\\"></div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                styles: [\"gridster-item{box-sizing:border-box;z-index:1;position:absolute;overflow:hidden;transition:.3s;display:none;background:#fff;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text}gridster-item.gridster-item-moving{cursor:move}gridster-item.gridster-item-moving,gridster-item.gridster-item-resizing{transition:none;z-index:2;box-shadow:0 0 5px 5px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.gridster-item-resizable-handler{position:absolute;z-index:2}.gridster-item-resizable-handler.handle-n{cursor:ns-resize;height:10px;right:0;top:0;left:0}.gridster-item-resizable-handler.handle-e{cursor:ew-resize;width:10px;bottom:0;right:0;top:0}.gridster-item-resizable-handler.handle-s{cursor:ns-resize;height:10px;right:0;bottom:0;left:0}.gridster-item-resizable-handler.handle-w{cursor:ew-resize;width:10px;left:0;top:0;bottom:0}.gridster-item-resizable-handler.handle-ne{cursor:ne-resize;width:10px;height:10px;right:0;top:0}.gridster-item-resizable-handler.handle-nw{cursor:nw-resize;width:10px;height:10px;left:0;top:0}.gridster-item-resizable-handler.handle-se{cursor:se-resize;width:0;height:0;right:0;bottom:0;border-style:solid;border-width:0 0 10px 10px;border-color:transparent}.gridster-item-resizable-handler.handle-sw{cursor:sw-resize;width:10px;height:10px;left:0;bottom:0}gridster-item:hover .gridster-item-resizable-handler.handle-se{border-color:transparent transparent #ccc}\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef, decorators: [{\n                type: Inject,\n                args: [ElementRef]\n            }] }, { type: GridsterComponent }, { type: ɵngcc0.Renderer2, decorators: [{\n                type: Inject,\n                args: [Renderer2]\n            }] }, { type: ɵngcc0.NgZone, decorators: [{\n                type: Inject,\n                args: [NgZone]\n            }] }]; }, { zIndex: [{\n            type: HostBinding,\n            args: ['style.z-index']\n        }], item: [{\n            type: Input\n        }] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GridsterPreviewComponent, [{\n        type: Component,\n        args: [{\n                selector: 'gridster-preview',\n                template: '',\n                encapsulation: ViewEncapsulation.None,\n                styles: [\"gridster-preview{position:absolute;display:none;background:rgba(0,0,0,.15)}\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef, decorators: [{\n                type: Inject,\n                args: [ElementRef]\n            }] }, { type: GridsterComponent }, { type: ɵngcc0.Renderer2, decorators: [{\n                type: Inject,\n                args: [Renderer2]\n            }] }]; }, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GridsterModule, { declarations: function () { return [GridsterComponent,\n        GridsterItemComponent,\n        GridsterPreviewComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [GridsterComponent,\n        GridsterItemComponent]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GridsterModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    GridsterComponent,\n                    GridsterItemComponent,\n                    GridsterPreviewComponent\n                ],\n                imports: [\n                    CommonModule\n                ],\n                exports: [GridsterComponent, GridsterItemComponent],\n                providers: [],\n                bootstrap: [],\n                entryComponents: [GridsterComponent, GridsterItemComponent]\n            }]\n    }], null, null); })();\n\n/*\n * Public API Surface of gridster\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CompactType, DirTypes, DisplayGrid, GridType, GridsterComponent, GridsterComponentInterface, GridsterConfigService, GridsterItemComponent, GridsterItemComponentInterface, GridsterModule, GridsterPush, GridsterPushResize, GridsterSwap, GridsterPreviewComponent as ɵa };\n\n//# sourceMappingURL=angular-gridster2.js.map","import {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class AppComponent {\n}\n","<mat-nav-list>\n  <a routerLink=\"\" routerLinkActive=\"active\" [routerLinkActiveOptions]=\"{ exact: true }\" mat-list-item> Home</a>\n  <a routerLink=\"/api\" routerLinkActive=\"active\" mat-list-item> API</a>\n  <a routerLink=\"/compact\" routerLinkActive=\"active\" mat-list-item> Compact</a>\n  <a routerLink=\"/displayGrid\" routerLinkActive=\"active\" mat-list-item> Display Grid</a>\n  <a routerLink=\"/drag\" routerLinkActive=\"active\" mat-list-item> Drag</a>\n  <a mat-list-item routerLink=\"/dynamicWidgets\" routerLinkActive=\"active\"> Dynamic Widgets</a>\n  <a routerLink=\"/emptyCell\" routerLinkActive=\"active\" mat-list-item> Empty Cell</a>\n  <a routerLink=\"/gridEvents\" routerLinkActive=\"active\" mat-list-item> Grid Events</a>\n  <a routerLink=\"/gridMargins\" routerLinkActive=\"active\" mat-list-item> Grid Margins</a>\n  <a routerLink=\"/gridSizes\" routerLinkActive=\"active\" mat-list-item> Grid Sizes</a>\n  <a routerLink=\"/gridTypes\" routerLinkActive=\"active\" mat-list-item> Grid Types</a>\n  <a routerLink=\"/items\" routerLinkActive=\"active\" mat-list-item> Items</a>\n  <a routerLink=\"/push\" routerLinkActive=\"active\" mat-list-item> Push</a>\n  <a routerLink=\"/resize\" routerLinkActive=\"active\" mat-list-item> Resize</a>\n  <a routerLink=\"/swap\" routerLinkActive=\"active\" mat-list-item> Swap</a>\n  <a routerLink=\"/multiLayer\" routerLinkActive=\"active\" mat-list-item> Multi Layer</a>\n  <a routerLink=\"/misc\" routerLinkActive=\"active\" mat-list-item> Misc</a>\n  <a routerLink=\"/rtl\" routerLinkActive=\"active\" mat-list-item> RTL</a>\n</mat-nav-list>\n<router-outlet></router-outlet>\n","import {HttpClient, HttpClientModule} from '@angular/common/http';\nimport {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {RouterModule, Routes} from '@angular/router';\nimport {GridsterModule} from 'angular-gridster2';\nimport {MarkdownModule, MarkedOptions} from 'ngx-markdown';\n\nimport {AppComponent} from './app.component';\nimport {ApiComponent} from './sections/api/api.component';\nimport {CompactComponent} from './sections/compact/compact.component';\nimport {DisplayGridComponent} from './sections/displayGrid/displayGrid.component';\nimport {DragComponent} from './sections/drag/drag.component';\nimport {DynamicWidgetsComponent} from './sections/dynamicWidgets/dynamicWidgets.component';\nimport {ParentDynamicComponent} from './sections/dynamicWidgets/parentDynamic.component';\nimport {WidgetAComponent} from './sections/dynamicWidgets/widgetA.component';\nimport {WidgetBComponent} from './sections/dynamicWidgets/widgetB.component';\nimport {WidgetCComponent} from './sections/dynamicWidgets/widgetC.component';\nimport {EmptyCellComponent} from './sections/emptyCell/emptyCell.component';\nimport {GridEventsComponent} from './sections/gridEvents/gridEvents.component';\nimport {GridMarginsComponent} from './sections/gridMargins/gridMargins.component';\nimport {GridSizesComponent} from './sections/gridSizes/gridSizes.component';\nimport {GridTypesComponent} from './sections/gridTypes/gridTypes.component';\nimport {HomeComponent} from './sections/home/home.component';\nimport {ItemsComponent} from './sections/items/items.component';\nimport {MiscComponent} from './sections/misc/misc.component';\nimport {PushComponent} from './sections/push/push.component';\nimport {ResizeComponent} from './sections/resize/resize.component';\nimport {RtlComponent} from './sections/rtl/rtl.component';\nimport {SwapComponent} from './sections/swap/swap.component';\nimport {MultiLayerComponent} from './sections/multiLayer/multi-layer.component';\nimport {MatMenuModule} from \"@angular/material/menu\";\n\nconst appRoutes: Routes = [\n  {path: '', component: HomeComponent},\n  {path: 'api', component: ApiComponent},\n  {path: 'compact', component: CompactComponent},\n  {path: 'displayGrid', component: DisplayGridComponent},\n  {path: 'drag', component: DragComponent},\n  {path: 'dynamicWidgets', component: DynamicWidgetsComponent},\n  {path: 'emptyCell', component: EmptyCellComponent},\n  {path: 'gridEvents', component: GridEventsComponent},\n  {path: 'gridMargins', component: GridMarginsComponent},\n  {path: 'gridSizes', component: GridSizesComponent},\n  {path: 'gridTypes', component: GridTypesComponent},\n  {path: 'items', component: ItemsComponent},\n  {path: 'push', component: PushComponent},\n  {path: 'resize', component: ResizeComponent},\n  {path: 'swap', component: SwapComponent},\n  {path: 'multiLayer', component: MultiLayerComponent},\n  {path: 'misc', component: MiscComponent},\n  {path: 'rtl', component: RtlComponent},\n  {path: '**', redirectTo: ''}\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    ApiComponent,\n    CompactComponent,\n    DisplayGridComponent,\n    DragComponent,\n    DynamicWidgetsComponent,\n    ParentDynamicComponent,\n    WidgetAComponent,\n    WidgetBComponent,\n    WidgetCComponent,\n    EmptyCellComponent,\n    GridEventsComponent,\n    GridMarginsComponent,\n    GridSizesComponent,\n    GridTypesComponent,\n    ItemsComponent,\n    PushComponent,\n    MultiLayerComponent,\n    ResizeComponent,\n    SwapComponent,\n    MiscComponent,\n    RtlComponent,\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FormsModule,\n    HttpClientModule,\n    RouterModule.forRoot(appRoutes),\n    MatIconModule, MatButtonModule, MatSelectModule, MatInputModule, MatCheckboxModule, MatSidenavModule, MatListModule,\n    GridsterModule, MatMenuModule,\n    MarkdownModule.forRoot({loader: HttpClient, markedOptions: {provide: MarkedOptions, useValue: {smartypants: true, breaks: true}}}),\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {\n\n}\n","import {ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation} from '@angular/core';\n\nimport {CompactType, GridsterConfig, GridsterItem, GridsterItemComponent, GridsterPush, GridType} from 'angular-gridster2';\n\n@Component({\n  selector: 'app-api',\n  templateUrl: './api.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class ApiComponent implements OnInit {\n  options: GridsterConfig;\n  dashboard: Array<GridsterItem>;\n  itemToPush: GridsterItemComponent;\n\n  ngOnInit() {\n    this.options = {\n      gridType: GridType.Fit,\n      compactType: CompactType.None,\n      pushItems: true,\n      draggable: {\n        enabled: true\n      },\n      resizable: {\n        enabled: true\n      }\n    };\n\n    this.dashboard = [\n      {cols: 2, rows: 1, y: 0, x: 0, initCallback: this.initItem.bind(this)},\n      {cols: 2, rows: 2, y: 0, x: 2},\n      {cols: 1, rows: 1, y: 0, x: 4},\n      {cols: 3, rows: 2, y: 1, x: 4},\n      {cols: 1, rows: 1, y: 4, x: 5},\n      {cols: 1, rows: 1, y: 2, x: 1},\n      {cols: 2, rows: 2, y: 5, x: 5},\n      {cols: 2, rows: 2, y: 3, x: 2},\n      {cols: 2, rows: 1, y: 2, x: 2},\n      {cols: 1, rows: 1, y: 3, x: 4},\n      {cols: 1, rows: 1, y: 0, x: 6}\n    ];\n  }\n\n  changedOptions() {\n    if (this.options.api && this.options.api.optionsChanged) {\n      this.options.api.optionsChanged();\n    }\n  }\n\n  removeItem($event, item) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    this.dashboard.splice(this.dashboard.indexOf(item), 1);\n  }\n\n  addItem() {\n    this.dashboard.push({x: 0, y: 0, cols: 1, rows: 1});\n  }\n\n  initItem(item: GridsterItem, itemComponent: GridsterItemComponent) {\n    this.itemToPush = itemComponent;\n  }\n\n  pushItem() {\n    const push = new GridsterPush(this.itemToPush); // init the service\n    this.itemToPush.$item.rows += 4; // move/resize your item\n    if (push.pushItems(push.fromNorth)) { // push items from a direction\n      push.checkPushBack(); // check for items can restore to original position\n      push.setPushedItems(); // save the items pushed\n      this.itemToPush.setSize();\n      this.itemToPush.checkItemChanges(this.itemToPush.$item, this.itemToPush.item);\n    } else {\n      this.itemToPush.$item.rows -= 4;\n      push.restoreItems(); // restore to initial state the pushed items\n    }\n    push.destroy(); // destroy push instance\n    // similar for GridsterPushResize and GridsterSwap\n  }\n}\n","<div class=\"options\">\n  <a mat-raised-button href=\"https://github.com/tiberiuzuld/angular-gridster2/tree/master/src/app/sections/api\"\n     target=\"_blank\" class=\"source-code-button\">\n    <mat-icon>open_in_new</mat-icon>\n    Source\n  </a>\n  <markdown [src]=\"'assets/api.md'\"></markdown>\n</div>\n<div class=\"options-header\">\n  <button mat-raised-button color=\"accent\" (click)=\"pushItem()\" class=\"add-button cols-2\">\n    Resize first item and push others\n  </button>\n  <button mat-mini-fab (click)=\"addItem()\" class=\"add-button cols-2\">\n    <mat-icon>add</mat-icon>\n  </button>\n</div>\n\n\n<gridster [options]=\"options\">\n  <gridster-item [item]=\"item\" *ngFor=\"let item of dashboard\">\n    <div class=\"button-holder\">\n      <button mat-mini-fab (mousedown)=\"removeItem($event, item)\"\n              (touchstart)=\"removeItem($event, item)\">\n        <mat-icon>delete</mat-icon>\n      </button>\n    </div>\n  </gridster-item>\n</gridster>\n","import {ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation} from '@angular/core';\n\nimport {CompactType, GridsterConfig, GridsterItem, GridType} from 'angular-gridster2';\n\n@Component({\n  selector: 'app-compact',\n  templateUrl: './compact.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class CompactComponent implements OnInit {\n  options: GridsterConfig;\n  dashboard: Array<GridsterItem>;\n\n  ngOnInit() {\n    this.options = {\n      gridType: GridType.Fit,\n      compactType: CompactType.None,\n      maxCols: 10,\n      pushItems: true,\n      draggable: {\n        enabled: true\n      },\n      resizable: {\n        enabled: true\n      }\n    };\n\n    this.dashboard = [\n      {cols: 2, rows: 1, y: 0, x: 0},\n      {cols: 2, rows: 2, y: 0, x: 2},\n      {cols: 1, rows: 1, y: 0, x: 4},\n      {cols: 3, rows: 2, y: 1, x: 4},\n      {cols: 1, rows: 1, y: 4, x: 5},\n      {cols: 1, rows: 1, y: 2, x: 1},\n      {cols: 2, rows: 2, y: 5, x: 5},\n      {cols: 2, rows: 2, y: 3, x: 2},\n      {cols: 2, rows: 1, y: 2, x: 2},\n      {cols: 1, rows: 1, y: 3, x: 4},\n      {cols: 1, rows: 1, y: 0, x: 6}\n    ];\n  }\n\n  changedOptions() {\n    if (this.options.api && this.options.api.optionsChanged) {\n      this.options.api.optionsChanged();\n    }\n  }\n\n  removeItem($event, item) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    this.dashboard.splice(this.dashboard.indexOf(item), 1);\n  }\n\n  addItem() {\n    this.dashboard.push({x: 0, y: 0, cols: 1, rows: 1});\n  }\n}\n","<div class=\"options\">\n  <a mat-raised-button href=\"https://github.com/tiberiuzuld/angular-gridster2/tree/master/src/app/sections/compact\"\n     target=\"_blank\" class=\"source-code-button\">\n    <mat-icon>open_in_new</mat-icon>\n    Source\n  </a>\n  <markdown [src]=\"'assets/compact.md'\"></markdown>\n</div>\n<div class=\"options-header\">\n  <mat-form-field>\n    <mat-select aria-label=\"Compact type\" [(ngModel)]=\"options.compactType\" (ngModelChange)=\"changedOptions()\"\n                placeholder=\"Compact Type\">\n      <mat-option value=\"none\">None</mat-option>\n      <mat-option value=\"compactUp\">Compact Up</mat-option>\n      <mat-option value=\"compactLeft\">Compact Left</mat-option>\n      <mat-option value=\"compactLeft&Up\">Compact Left & Up</mat-option>\n      <mat-option value=\"compactUp&Left\">Compact Up & Left</mat-option>\n      <mat-option value=\"compactRight\">Compact Right</mat-option>\n      <mat-option value=\"compactUp&Right\">Compact Up & Right</mat-option>\n      <mat-option value=\"compactRight&Up\">Compact Right & Up</mat-option>\n    </mat-select>\n  </mat-form-field>\n  <button mat-mini-fab (click)=\"addItem()\" class=\"add-button cols-2\">\n    <mat-icon>add</mat-icon>\n  </button>\n</div>\n\n\n<gridster [options]=\"options\">\n  <gridster-item [item]=\"item\" *ngFor=\"let item of dashboard\">\n    <div class=\"button-holder\">\n      <button mat-mini-fab (mousedown)=\"removeItem($event, item)\"\n              (touchstart)=\"removeItem($event, item)\">\n        <mat-icon>delete</mat-icon>\n      </button>\n    </div>\n  </gridster-item>\n</gridster>\n","import {ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation} from '@angular/core';\n\nimport {DisplayGrid, GridsterConfig, GridsterItem, GridType} from 'angular-gridster2';\n\n@Component({\n  selector: 'app-display-grid',\n  templateUrl: './displayGrid.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class DisplayGridComponent implements OnInit {\n  options: GridsterConfig;\n  dashboard: Array<GridsterItem>;\n\n  ngOnInit() {\n    this.options = {\n      gridType: GridType.Fit,\n      displayGrid: DisplayGrid.Always,\n      pushItems: true,\n      draggable: {\n        enabled: true\n      },\n      resizable: {\n        enabled: true\n      }\n    };\n\n    this.dashboard = [\n      {cols: 2, rows: 1, y: 0, x: 0},\n      {cols: 2, rows: 2, y: 0, x: 2},\n      {cols: 1, rows: 1, y: 0, x: 4},\n      {cols: 3, rows: 2, y: 1, x: 4},\n      {cols: 1, rows: 1, y: 4, x: 5},\n      {cols: 1, rows: 1, y: 2, x: 1},\n      {cols: 2, rows: 2, y: 5, x: 5},\n      {cols: 2, rows: 2, y: 3, x: 2},\n      {cols: 2, rows: 1, y: 2, x: 2},\n      {cols: 1, rows: 1, y: 3, x: 4},\n      {cols: 1, rows: 1, y: 0, x: 6}\n    ];\n  }\n\n  changedOptions() {\n    if (this.options.api && this.options.api.optionsChanged) {\n      this.options.api.optionsChanged();\n    }\n  }\n\n  removeItem($event, item) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    this.dashboard.splice(this.dashboard.indexOf(item), 1);\n  }\n\n  addItem() {\n    this.dashboard.push({x: 0, y: 0, cols: 1, rows: 1});\n  }\n}\n","<div class=\"options\">\n  <a mat-raised-button href=\"https://github.com/tiberiuzuld/angular-gridster2/tree/master/src/app/sections/displayGrid\"\n     target=\"_blank\" class=\"source-code-button\">\n    <mat-icon>open_in_new</mat-icon>\n    Source\n  </a>\n  <markdown [src]=\"'assets/displayGrid.md'\"></markdown>\n</div>\n<div class=\"options-header\">\n  <mat-form-field>\n    <mat-select aria-label=\"Display grid lines\" [(ngModel)]=\"options.displayGrid\"\n                placeholder=\"Display grid lines\"\n                (ngModelChange)=\"changedOptions()\">\n      <mat-option value=\"always\">Always</mat-option>\n      <mat-option value=\"onDrag&Resize\">On Drag & Resize</mat-option>\n      <mat-option value=\"none\">None</mat-option>\n    </mat-select>\n  </mat-form-field>\n  <button mat-mini-fab (click)=\"addItem()\" class=\"add-button cols-2\">\n    <mat-icon>add</mat-icon>\n  </button>\n</div>\n\n\n<gridster [options]=\"options\">\n  <gridster-item [item]=\"item\" *ngFor=\"let item of dashboard\">\n    <div class=\"button-holder\">\n      <button mat-mini-fab (mousedown)=\"removeItem($event, item)\"\n              (touchstart)=\"removeItem($event, item)\">\n        <mat-icon>delete</mat-icon>\n      </button>\n    </div>\n  </gridster-item>\n</gridster>\n","import {ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation} from '@angular/core';\n\nimport {\n  DisplayGrid,\n  Draggable,\n  GridsterComponent,\n  GridsterConfig,\n  GridsterItem,\n  GridsterItemComponentInterface,\n  GridType\n} from 'angular-gridster2';\n\ninterface Safe extends GridsterConfig {\n  draggable: Draggable;\n}\n\n@Component({\n  selector: 'app-drag',\n  templateUrl: './drag.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class DragComponent implements OnInit {\n  options: Safe;\n  dashboard: Array<GridsterItem>;\n\n  static eventStart(item: GridsterItem, itemComponent: GridsterItemComponentInterface, event: MouseEvent) {\n    console.info('eventStart', item, itemComponent, event);\n  }\n\n  static eventStop(item: GridsterItem, itemComponent: GridsterItemComponentInterface, event: MouseEvent) {\n    console.info('eventStop', item, itemComponent, event);\n  }\n\n  static overlapEvent(source: GridsterItem, target: GridsterItem, grid: GridsterComponent) {\n    console.log('overlap', source, target, grid);\n  }\n\n  ngOnInit() {\n    this.options = {\n      gridType: GridType.Fit,\n      displayGrid: DisplayGrid.Always,\n      pushItems: true,\n      swap: false,\n      draggable: {\n        delayStart: 0,\n        enabled: true,\n        ignoreContentClass: 'gridster-item-content',\n        ignoreContent: false,\n        dragHandleClass: 'drag-handler',\n        stop: DragComponent.eventStop,\n        start: DragComponent.eventStart,\n        dropOverItems: false,\n        dropOverItemsCallback: DragComponent.overlapEvent,\n      },\n      resizable: {\n        enabled: true\n      }\n    };\n\n    this.dashboard = [\n      {cols: 2, rows: 1, y: 0, x: 0},\n      {cols: 2, rows: 2, y: 0, x: 2, hasContent: true},\n      {cols: 1, rows: 1, y: 0, x: 4},\n      {cols: 1, rows: 1, y: 2, x: 5},\n      {cols: 1, rows: 1, y: 1, x: 0},\n      {cols: 1, rows: 1, y: 1, x: 0},\n      {cols: 2, rows: 2, y: 3, x: 5, minItemRows: 2, minItemCols: 2, label: 'Min rows & cols = 2'},\n      {cols: 2, rows: 2, y: 2, x: 0, maxItemRows: 2, maxItemCols: 2, label: 'Max rows & cols = 2'},\n      {cols: 2, rows: 1, y: 2, x: 2, dragEnabled: true, resizeEnabled: true, label: 'Drag&Resize Enabled'},\n      {cols: 1, rows: 1, y: 2, x: 4, dragEnabled: false, resizeEnabled: false, label: 'Drag&Resize Disabled'},\n      {cols: 1, rows: 1, y: 2, x: 6}\n    ];\n  }\n\n  changedOptions() {\n    if (this.options.api && this.options.api.optionsChanged) {\n      this.options.api.optionsChanged();\n    }\n  }\n\n  removeItem($event, item) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    this.dashboard.splice(this.dashboard.indexOf(item), 1);\n  }\n\n  addItem() {\n    this.dashboard.push({x: 0, y: 0, cols: 1, rows: 1});\n  }\n}\n","<div class=\"options\">\n  <a mat-raised-button href=\"https://github.com/tiberiuzuld/angular-gridster2/tree/master/src/app/sections/drag\"\n     target=\"_blank\" class=\"source-code-button\">\n    <mat-icon>open_in_new</mat-icon>\n    Source\n  </a>\n  <markdown [src]=\"'assets/drag.md'\"></markdown>\n</div>\n<div class=\"options-header\" *ngIf=\"options.draggable\">\n  <mat-checkbox [(ngModel)]=\"options.draggable.enabled\" (ngModelChange)=\"changedOptions()\">\n    Drag Items\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.pushItems\" (ngModelChange)=\"changedOptions()\">\n    Push Items\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.draggable.dropOverItems\" (ngModelChange)=\"changedOptions()\">\n    Allow Drop Over Items\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.draggable.ignoreContent\" (ngModelChange)=\"changedOptions()\">\n    Ignore Content\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.disableScrollVertical\" (ngModelChange)=\"changedOptions()\">\n    Disable Vertical Scroll\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.disableScrollHorizontal\" (ngModelChange)=\"changedOptions()\">\n    Disable Horizontal Scroll\n  </mat-checkbox>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.draggable.delayStart\" type=\"number\" placeholder=\"Delay Start ms\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.draggable.dragHandleClass\" type=\"text\" placeholder=\"Drag Handle Class\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.draggable.ignoreContentClass\" type=\"text\" placeholder=\"Ignore Content Class\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <button mat-mini-fab (click)=\"addItem()\" class=\"add-button cols-2\">\n    <mat-icon>add</mat-icon>\n  </button>\n</div>\n\n\n<gridster [options]=\"options\">\n  <gridster-item [item]=\"item\" *ngFor=\"let item of dashboard\">\n    <div class=\"button-holder\">\n      <div class=\"gridster-item-content\" *ngIf=\"item.hasContent\">\n        <div class=\"stuff\">\n          <span>Some content to select and click without dragging the widget</span>\n          <a href=\"https://www.google.com\" target=\"_blank\">Link to Google</a>\n        </div>\n      </div>\n      <div class=\"item-buttons\" *ngIf=\"item.hasContent\">\n        <button mat-icon-button mat-raised-button class=\"drag-handler\">\n          <mat-icon>open_with</mat-icon>\n        </button>\n        <button mat-icon-button mat-raised-button class=\"remove-button\" (mousedown)=\"removeItem($event, item)\"\n                (touchstart)=\"removeItem($event, item)\">\n          <mat-icon>delete</mat-icon>\n        </button>\n      </div>\n      <label *ngIf=\"!item.hasContent\">{{item.label}}</label>\n      <button mat-mini-fab *ngIf=\"!item.hasContent\" (mousedown)=\"removeItem($event, item)\"\n              (touchstart)=\"removeItem($event, item)\">\n        <mat-icon>delete</mat-icon>\n      </button>\n    </div>\n  </gridster-item>\n</gridster>\n","import {ChangeDetectionStrategy, Component, EventEmitter, OnInit, ViewEncapsulation} from '@angular/core';\n\nimport {DisplayGrid, GridsterConfig, GridsterItem, GridType} from 'angular-gridster2';\n\n@Component({\n  selector: 'app-dynamic-widgets',\n  templateUrl: './dynamicWidgets.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class DynamicWidgetsComponent implements OnInit {\n  options: GridsterConfig;\n  dashboard: Array<GridsterItem>;\n  resizeEvent: EventEmitter<any> = new EventEmitter<any>();\n\n  ngOnInit() {\n    this.options = {\n      gridType: GridType.Fit,\n      displayGrid: DisplayGrid.Always,\n      disableWindowResize: false,\n      scrollToNewItems: false,\n      disableWarnings: false,\n      ignoreMarginInRow: false,\n      itemResizeCallback: (item) => {\n        // update DB with new size\n        // send the update to widgets\n        this.resizeEvent.emit(item);\n      }\n    };\n\n    this.dashboard = [\n      {cols: 2, rows: 1, y: 0, x: 0, type: 'widgetA'},\n      {cols: 2, rows: 2, y: 0, x: 2, type: 'widgetB'},\n      {cols: 2, rows: 1, y: 1, x: 0, type: 'widgetC'},\n    ];\n  }\n}\n","<div class=\"options\">\n  <a class=\"source-code-button\"\n     href=\"https://github.com/tiberiuzuld/angular-gridster2/tree/master/src/app/sections/dynamicWidgets\"\n     mat-raised-button target=\"_blank\">\n    <mat-icon>open_in_new</mat-icon>\n    Source\n  </a>\n  <markdown [src]=\"'assets/dynamicWidgets.md'\"></markdown>\n</div>\n\n\n<gridster [options]=\"options\">\n  <gridster-item [item]=\"item\" *ngFor=\"let item of dashboard\">\n    <app-parent-dynamic [widget]=\"item\" [resizeEvent]=\"resizeEvent\"></app-parent-dynamic>\n  </gridster-item>\n</gridster>\n","import {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\n\n\n@Component({\n  selector: 'app-parent-dynamic',\n  templateUrl: './parentDynamic.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class ParentDynamicComponent {\n  @Input()\n  widget;\n  @Input()\n  resizeEvent;\n}\n","<app-widget-a *ngIf=\"widget.type === 'widgetA'\" [resizeEvent]=\"resizeEvent\" [widget]=\"widget\"></app-widget-a>\n<app-widget-b [widget]=\"widget\" [resizeEvent]=\"resizeEvent\" *ngIf=\"widget.type === 'widgetB'\"></app-widget-b>\n<app-widget-c [widget]=\"widget\" [resizeEvent]=\"resizeEvent\" *ngIf=\"widget.type === 'widgetC'\"></app-widget-c>\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnDestroy, OnInit, ViewEncapsulation} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\n\n@Component({\n  selector: 'app-widget-a',\n  template: '{{widget.type}}',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class WidgetAComponent implements OnInit, OnDestroy {\n  @Input()\n  widget;\n  @Input()\n  resizeEvent: EventEmitter<any>;\n\n  resizeSub: Subscription;\n\n  ngOnInit() {\n    this.resizeSub = this.resizeEvent.subscribe((widget) => {\n      if (widget === this.widget) { // or check id , type or whatever you have there\n        // resize your widget, chart, map , etc.\n        console.log(widget);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.resizeSub.unsubscribe();\n  }\n}\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnDestroy, OnInit, ViewEncapsulation} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\n\n@Component({\n  selector: 'app-widget-b',\n  template: '{{widget.type}}',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class WidgetBComponent implements OnInit, OnDestroy {\n  @Input()\n  widget;\n  @Input()\n  resizeEvent: EventEmitter<any>;\n\n  resizeSub: Subscription;\n\n  ngOnInit() {\n    this.resizeSub = this.resizeEvent.subscribe((widget) => {\n      if (widget === this.widget) { // or check id , type or whatever you have there\n        // resize your widget, chart, map , etc.\n        console.log(widget);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.resizeSub.unsubscribe();\n  }\n}\n","import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnDestroy, OnInit, ViewEncapsulation} from '@angular/core';\nimport {Subscription} from 'rxjs';\n\n\n@Component({\n  selector: 'app-widget-c',\n  template: '{{widget.type}}',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class WidgetCComponent implements OnInit, OnDestroy {\n  @Input()\n  widget;\n  @Input()\n  resizeEvent: EventEmitter<any>;\n\n  resizeSub: Subscription;\n\n  ngOnInit() {\n    this.resizeSub = this.resizeEvent.subscribe((widget) => {\n      if (widget === this.widget) { // or check id , type or whatever you have there\n        // resize your widget, chart, map , etc.\n        console.log(widget);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.resizeSub.unsubscribe();\n  }\n}\n","import {ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation} from '@angular/core';\n\nimport {DisplayGrid, GridsterConfig, GridsterItem, GridType} from 'angular-gridster2';\n\n@Component({\n  selector: 'app-empty-cell',\n  templateUrl: './emptyCell.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class EmptyCellComponent implements OnInit {\n  options: GridsterConfig;\n  dashboard: Array<GridsterItem>;\n\n  ngOnInit() {\n    this.options = {\n      gridType: GridType.Fit,\n      displayGrid: DisplayGrid.Always,\n      enableEmptyCellClick: false,\n      enableEmptyCellContextMenu: false,\n      enableEmptyCellDrop: false,\n      enableEmptyCellDrag: false,\n      enableOccupiedCellDrop: false,\n      emptyCellClickCallback: this.emptyCellClick.bind(this),\n      emptyCellContextMenuCallback: this.emptyCellClick.bind(this),\n      emptyCellDropCallback: this.emptyCellClick.bind(this),\n      emptyCellDragCallback: this.emptyCellClick.bind(this),\n      emptyCellDragMaxCols: 50,\n      emptyCellDragMaxRows: 50,\n    };\n\n    this.dashboard = [\n      {cols: 2, rows: 1, y: 0, x: 0},\n      {cols: 2, rows: 2, y: 0, x: 2},\n      {cols: 1, rows: 1, y: 0, x: 4},\n      {cols: 3, rows: 2, y: 1, x: 4},\n      {cols: 1, rows: 1, y: 4, x: 5},\n      {cols: 1, rows: 1, y: 2, x: 1},\n      {cols: 2, rows: 2, y: 5, x: 5},\n      {cols: 2, rows: 2, y: 3, x: 2},\n      {cols: 2, rows: 1, y: 2, x: 2},\n      {cols: 1, rows: 1, y: 3, x: 4},\n      {cols: 1, rows: 1, y: 0, x: 6}\n    ];\n  }\n\n  changedOptions() {\n    if (this.options.api && this.options.api.optionsChanged) {\n      this.options.api.optionsChanged();\n    }\n  }\n\n  emptyCellClick(event: MouseEvent, item: GridsterItem) {\n    console.info('empty cell click', event, item);\n    this.dashboard.push(item);\n  }\n\n  removeItem($event, item) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    this.dashboard.splice(this.dashboard.indexOf(item), 1);\n  }\n\n  addItem() {\n    this.dashboard.push({x: 0, y: 0, cols: 1, rows: 1});\n  }\n\n  dragStartHandler(ev) {\n    ev.dataTransfer.setData('text/plain', 'Drag Me Button');\n    ev.dataTransfer.dropEffect = 'copy';\n  }\n}\n","<div class=\"options\">\n  <a mat-raised-button href=\"https://github.com/tiberiuzuld/angular-gridster2/tree/master/src/app/sections/emptyCell\"\n     target=\"_blank\" class=\"source-code-button\">\n    <mat-icon>open_in_new</mat-icon>\n    Source\n  </a>\n  <markdown [src]=\"'assets/emptyCell.md'\"></markdown>\n</div>\n<div class=\"options-header\">\n  <mat-checkbox [(ngModel)]=\"options.enableEmptyCellClick\" (ngModelChange)=\"changedOptions()\">\n    Enable click to add\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.enableEmptyCellContextMenu\" (ngModelChange)=\"changedOptions()\">\n    Enable right click to add\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.enableEmptyCellDrop\" (ngModelChange)=\"changedOptions()\">\n    Enable drop to add\n  </mat-checkbox>\n  <div *ngIf=\"options.enableEmptyCellDrop\" draggable=\"true\" (dragstart)=\"dragStartHandler($event)\">Drag me!</div>\n  <mat-checkbox [(ngModel)]=\"options.enableOccupiedCellDrop\" (ngModelChange)=\"changedOptions()\" [disabled]=\"!options.enableEmptyCellDrop\">\n    Enable drop on occupied cell\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.enableEmptyCellDrag\" (ngModelChange)=\"changedOptions()\">\n    Enable drag to add\n  </mat-checkbox>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.emptyCellDragMaxCols\" type=\"number\" placeholder=\"Drag Max Cols\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.emptyCellDragMaxRows\" type=\"number\" placeholder=\"Drag Max Rows\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <button mat-mini-fab (click)=\"addItem()\" class=\"add-button cols-2\">\n    <mat-icon>add</mat-icon>\n  </button>\n</div>\n\n\n<gridster [options]=\"options\">\n  <gridster-item [item]=\"item\" *ngFor=\"let item of dashboard\">\n    <div class=\"button-holder\">\n      <button mat-mini-fab (mousedown)=\"removeItem($event, item)\"\n              (touchstart)=\"removeItem($event, item)\">\n        <mat-icon>delete</mat-icon>\n      </button>\n    </div>\n  </gridster-item>\n</gridster>\n","import {ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation} from '@angular/core';\n\nimport {\n  DisplayGrid,\n  GridsterComponentInterface,\n  GridsterConfig,\n  GridsterItem,\n  GridsterItemComponentInterface,\n  GridType\n} from 'angular-gridster2';\n\n@Component({\n  selector: 'app-grid-events',\n  templateUrl: './gridEvents.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class GridEventsComponent implements OnInit {\n  options: GridsterConfig;\n  dashboard: Array<GridsterItem>;\n  remove: boolean;\n\n  static itemChange(item: GridsterItem, itemComponent: GridsterItemComponentInterface) {\n    console.info('itemChanged', item, itemComponent);\n  }\n\n  static itemResize(item: GridsterItem, itemComponent: GridsterItemComponentInterface) {\n    console.info('itemResized', item, itemComponent);\n  }\n\n  static itemInit(item: GridsterItem, itemComponent: GridsterItemComponentInterface) {\n    console.info('itemInitialized', item, itemComponent);\n  }\n\n  static itemRemoved(item: GridsterItem, itemComponent: GridsterItemComponentInterface) {\n    console.info('itemRemoved', item, itemComponent);\n  }\n\n  static itemValidate(item: GridsterItem) {\n    return item.cols > 0 && item.rows > 0;\n  }\n\n  static gridInit(grid: GridsterComponentInterface) {\n    console.info('gridInit', grid);\n  }\n\n  static gridDestroy(grid: GridsterComponentInterface) {\n    console.info('gridDestroy', grid);\n  }\n\n  static gridSizeChanged(grid: GridsterComponentInterface) {\n    console.info('gridSizeChanged', grid);\n  }\n\n  ngOnInit() {\n    this.options = {\n      gridType: GridType.Fit,\n      displayGrid: DisplayGrid.Always,\n      initCallback: GridEventsComponent.gridInit,\n      destroyCallback: GridEventsComponent.gridDestroy,\n      gridSizeChangedCallback: GridEventsComponent.gridSizeChanged,\n      itemChangeCallback: GridEventsComponent.itemChange,\n      itemResizeCallback: GridEventsComponent.itemResize,\n      itemInitCallback: GridEventsComponent.itemInit,\n      itemRemovedCallback: GridEventsComponent.itemRemoved,\n      itemValidateCallback: GridEventsComponent.itemValidate,\n      pushItems: true,\n      draggable: {\n        enabled: true\n      },\n      resizable: {\n        enabled: true\n      }\n    };\n\n    this.dashboard = [\n      {cols: 2, rows: 1, y: 0, x: 0},\n      {cols: 2, rows: 2, y: 0, x: 2},\n      {cols: 1, rows: 1, y: 0, x: 4},\n      {cols: 3, rows: 2, y: 1, x: 4},\n      {cols: 1, rows: 1, y: 4, x: 5},\n      {cols: 1, rows: 1, y: 2, x: 1},\n      {cols: 2, rows: 2, y: 5, x: 5},\n      {cols: 2, rows: 2, y: 3, x: 2},\n      {cols: 2, rows: 1, y: 2, x: 2},\n      {cols: 1, rows: 1, y: 3, x: 4},\n      {cols: 1, rows: 1, y: 0, x: 6}\n    ];\n  }\n\n  changedOptions() {\n    if (this.options.api && this.options.api.optionsChanged) {\n      this.options.api.optionsChanged();\n    }\n  }\n\n  removeItem($event, item) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    this.dashboard.splice(this.dashboard.indexOf(item), 1);\n  }\n\n  addItem() {\n    this.dashboard.push({x: 0, y: 0, cols: 1, rows: 1});\n  }\n\n  destroy() {\n    this.remove = !this.remove;\n  }\n}\n","<div class=\"options\">\n  <a mat-raised-button href=\"https://github.com/tiberiuzuld/angular-gridster2/tree/master/src/app/sections/gridEvents\"\n     target=\"_blank\" class=\"source-code-button\">\n    <mat-icon>open_in_new</mat-icon>\n    Source\n  </a>\n  <markdown [src]=\"'assets/gridEvents.md'\"></markdown>\n</div>\n<div class=\"options-header\">\n\n  <button mat-mini-fab (click)=\"addItem()\" class=\"add-button cols-2\">\n    <mat-icon>add</mat-icon>\n  </button>\n  <button mat-mini-fab class=\"destroy-button\" (click)=\"destroy()\">\n    <mat-icon>delete</mat-icon>\n  </button>\n</div>\n\n\n<gridster [options]=\"options\" *ngIf=\"!remove\">\n  <gridster-item [item]=\"item\" *ngFor=\"let item of dashboard\">\n    <div class=\"button-holder\">\n      <button mat-mini-fab (mousedown)=\"removeItem($event, item)\"\n              (touchstart)=\"removeItem($event, item)\">\n        <mat-icon>delete</mat-icon>\n      </button>\n    </div>\n  </gridster-item>\n</gridster>\n","import {ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation} from '@angular/core';\n\nimport {DisplayGrid, GridsterConfig, GridsterItem, GridType} from 'angular-gridster2';\n\n@Component({\n  selector: 'app-grid-margins',\n  templateUrl: './gridMargins.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class GridMarginsComponent implements OnInit {\n  options: GridsterConfig;\n  dashboard: Array<GridsterItem>;\n\n  ngOnInit() {\n    this.options = {\n      gridType: GridType.Fit,\n      displayGrid: DisplayGrid.Always,\n      margin: 10,\n      outerMargin: true,\n      outerMarginTop: null,\n      outerMarginRight: null,\n      outerMarginBottom: null,\n      outerMarginLeft: null,\n    };\n\n    this.dashboard = [\n      {cols: 2, rows: 1, y: 0, x: 0},\n      {cols: 2, rows: 2, y: 0, x: 2},\n      {cols: 1, rows: 1, y: 0, x: 4},\n      {cols: 3, rows: 2, y: 1, x: 4},\n      {cols: 1, rows: 1, y: 4, x: 5},\n      {cols: 1, rows: 1, y: 2, x: 1},\n      {cols: 2, rows: 2, y: 5, x: 5},\n      {cols: 2, rows: 2, y: 3, x: 2},\n      {cols: 2, rows: 1, y: 2, x: 2},\n      {cols: 1, rows: 1, y: 3, x: 4},\n      {cols: 1, rows: 1, y: 0, x: 6}\n    ];\n  }\n\n  changedOptions() {\n    if (this.options.api && this.options.api.optionsChanged) {\n      this.options.api.optionsChanged();\n    }\n  }\n\n  removeItem($event, item) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    this.dashboard.splice(this.dashboard.indexOf(item), 1);\n  }\n\n  addItem() {\n    this.dashboard.push({x: 0, y: 0, cols: 1, rows: 1});\n  }\n}\n","<div class=\"options\">\n  <a mat-raised-button href=\"https://github.com/tiberiuzuld/angular-gridster2/tree/master/src/app/sections/gridMargins\"\n     target=\"_blank\" class=\"source-code-button\">\n    <mat-icon>open_in_new</mat-icon>\n    Source\n  </a>\n  <markdown [src]=\"'assets/gridMargins.md'\"></markdown>\n</div>\n<div class=\"options-header\">\n  <mat-form-field>\n    <mat-select aria-label=\"Grid type\" [(ngModel)]=\"options.gridType\" (ngModelChange)=\"changedOptions()\"\n                placeholder=\"Grid Type\">\n      <mat-option value=\"fit\">Fit to screen</mat-option>\n      <mat-option value=\"scrollVertical\">Scroll Vertical</mat-option>\n      <mat-option value=\"scrollHorizontal\">Scroll Horizontal</mat-option>\n      <mat-option value=\"fixed\">Fixed</mat-option>\n      <mat-option value=\"verticalFixed\">Vertical Fixed</mat-option>\n      <mat-option value=\"horizontalFixed\">Horizontal Fixed</mat-option>\n    </mat-select>\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.margin\" min=\"0\" max=\"30\" step=\"1\" type=\"number\" placeholder=\"Margin\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-checkbox [(ngModel)]=\"options.outerMargin\" (ngModelChange)=\"changedOptions()\">Outer Margin</mat-checkbox>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.outerMarginTop\" min=\"0\" max=\"30\" step=\"1\" type=\"number\"\n           placeholder=\"Grid Margin Top\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.outerMarginRight\" min=\"0\" max=\"30\" step=\"1\" type=\"number\"\n           placeholder=\"Grid Margin Right\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.outerMarginBottom\" min=\"0\" max=\"30\" step=\"1\" type=\"number\"\n           placeholder=\"Grid Margin Bottom\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.outerMarginLeft\" min=\"0\" max=\"30\" step=\"1\" type=\"number\"\n           placeholder=\"Grid Margin Left\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <button mat-mini-fab (click)=\"addItem()\" class=\"add-button cols-2\">\n    <mat-icon>add</mat-icon>\n  </button>\n</div>\n\n\n<gridster [options]=\"options\">\n  <gridster-item [item]=\"item\" *ngFor=\"let item of dashboard\">\n    <div class=\"button-holder\">\n      <button mat-mini-fab (mousedown)=\"removeItem($event, item)\"\n              (touchstart)=\"removeItem($event, item)\">\n        <mat-icon>delete</mat-icon>\n      </button>\n    </div>\n  </gridster-item>\n</gridster>\n","import {ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation} from '@angular/core';\n\nimport {DisplayGrid, GridsterConfig, GridsterItem, GridType} from 'angular-gridster2';\n\n@Component({\n  selector: 'app-grid-sizes',\n  templateUrl: './gridSizes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class GridSizesComponent implements OnInit {\n  options: GridsterConfig;\n  dashboard: Array<GridsterItem>;\n\n  ngOnInit() {\n    this.options = {\n      gridType: GridType.Fit,\n      displayGrid: DisplayGrid.Always,\n      pushItems: true,\n      draggable: {\n        enabled: true\n      },\n      resizable: {\n        enabled: true\n      },\n      minCols: 1,\n      maxCols: 100,\n      minRows: 1,\n      maxRows: 100,\n      maxItemCols: 100,\n      minItemCols: 1,\n      maxItemRows: 100,\n      minItemRows: 1,\n      maxItemArea: 2500,\n      minItemArea: 1,\n      defaultItemCols: 1,\n      defaultItemRows: 1\n    };\n\n    this.dashboard = [\n      {cols: 2, rows: 1, y: 0, x: 0},\n      {cols: 2, rows: 2, y: 0, x: 2},\n      {cols: 1, rows: 1, y: 0, x: 4},\n      {cols: 3, rows: 2, y: 1, x: 4},\n      {cols: 1, rows: 1, y: 4, x: 5},\n      {cols: 1, rows: 1, y: 2, x: 1},\n      {cols: 2, rows: 2, y: 5, x: 5},\n      {cols: 2, rows: 2, y: 3, x: 2},\n      {cols: 2, rows: 1, y: 2, x: 2},\n      {cols: 1, rows: 1, y: 3, x: 4},\n      {cols: 1, rows: 1, y: 0, x: 6}\n    ];\n  }\n\n  changedOptions() {\n    if (this.options.api && this.options.api.optionsChanged) {\n      this.options.api.optionsChanged();\n    }\n  }\n\n  removeItem($event, item) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    this.dashboard.splice(this.dashboard.indexOf(item), 1);\n  }\n\n  addItem() {\n    this.dashboard.push({x: 0, y: 0, cols: 1, rows: 1});\n  }\n}\n","<div class=\"options\">\n  <a mat-raised-button href=\"https://github.com/tiberiuzuld/angular-gridster2/tree/master/src/app/sections/gridSizes\"\n     target=\"_blank\" class=\"source-code-button\">\n    <mat-icon>open_in_new</mat-icon>\n    Source\n  </a>\n  <markdown [src]=\"'assets/gridSizes.md'\"></markdown>\n</div>\n<div class=\"options-header\">\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.minCols\" type=\"number\" placeholder=\"Min Grid Cols\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.maxCols\" type=\"number\" placeholder=\"Max Grid Cols\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.minRows\" type=\"number\" placeholder=\"Min Grid Rows\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.maxRows\" type=\"number\" placeholder=\"Max Grid Rows\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.maxItemCols\" type=\"number\" placeholder=\"Max Item Cols\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.minItemCols\" type=\"number\" placeholder=\"Min Item Cols\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.maxItemRows\" type=\"number\" placeholder=\"Max Item Rows\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.minItemRows\" type=\"number\" placeholder=\"Min Item Rows\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.maxItemArea\" type=\"number\" placeholder=\"Max Item Area\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.minItemArea\" type=\"number\" placeholder=\"Min Item Area\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.defaultItemRows\" type=\"number\" placeholder=\"Default Item Rows\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.defaultItemCols\" type=\"number\" placeholder=\"Default Item Cols\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <button mat-mini-fab (click)=\"addItem()\" class=\"add-button cols-2\">\n    <mat-icon>add</mat-icon>\n  </button>\n</div>\n\n\n<gridster [options]=\"options\">\n  <gridster-item [item]=\"item\" *ngFor=\"let item of dashboard\">\n    <div class=\"button-holder\">\n      <button mat-mini-fab (mousedown)=\"removeItem($event, item)\"\n              (touchstart)=\"removeItem($event, item)\">\n        <mat-icon>delete</mat-icon>\n      </button>\n    </div>\n  </gridster-item>\n</gridster>\n","import {ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation} from '@angular/core';\n\nimport {DisplayGrid, GridsterConfig, GridsterItem, GridType} from 'angular-gridster2';\n\n@Component({\n  selector: 'app-grid-types',\n  templateUrl: './gridTypes.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class GridTypesComponent implements OnInit {\n  options: GridsterConfig;\n  dashboard: Array<GridsterItem>;\n\n  ngOnInit() {\n    this.options = {\n      gridType: GridType.Fit,\n      displayGrid: DisplayGrid.Always,\n      fixedColWidth: 105,\n      fixedRowHeight: 105,\n      keepFixedHeightInMobile: false,\n      keepFixedWidthInMobile: false,\n      mobileBreakpoint: 640,\n      pushItems: true,\n      draggable: {\n        enabled: true\n      },\n      resizable: {\n        enabled: true\n      }\n    };\n\n    this.dashboard = [\n      {cols: 2, rows: 1, y: 0, x: 0},\n      {cols: 2, rows: 2, y: 0, x: 2},\n      {cols: 1, rows: 1, y: 0, x: 4},\n      {cols: 3, rows: 2, y: 1, x: 4},\n      {cols: 1, rows: 1, y: 4, x: 5},\n      {cols: 1, rows: 1, y: 2, x: 1},\n      {cols: 2, rows: 2, y: 5, x: 5},\n      {cols: 2, rows: 2, y: 3, x: 2},\n      {cols: 2, rows: 1, y: 2, x: 2},\n      {cols: 1, rows: 1, y: 3, x: 4},\n      {cols: 1, rows: 1, y: 0, x: 6}\n    ];\n  }\n\n  changedOptions() {\n    if (this.options.api && this.options.api.optionsChanged) {\n      this.options.api.optionsChanged();\n    }\n  }\n\n  removeItem($event, item) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    this.dashboard.splice(this.dashboard.indexOf(item), 1);\n  }\n\n  addItem() {\n    this.dashboard.push({x: 0, y: 0, cols: 1, rows: 1});\n  }\n}\n","<div class=\"options\">\n  <a mat-raised-button href=\"https://github.com/tiberiuzuld/angular-gridster2/tree/master/src/app/sections/gridTypes\"\n     target=\"_blank\" class=\"source-code-button\">\n    <mat-icon>open_in_new</mat-icon>\n    Source\n  </a>\n  <markdown [src]=\"'assets/gridTypes.md'\"></markdown>\n</div>\n<div class=\"options-header\">\n  <mat-form-field>\n    <mat-select aria-label=\"Grid type\" [(ngModel)]=\"options.gridType\" (ngModelChange)=\"changedOptions()\"\n                placeholder=\"Grid Type\">\n      <mat-option value=\"fit\">Fit to screen</mat-option>\n      <mat-option value=\"scrollVertical\">Scroll Vertical</mat-option>\n      <mat-option value=\"scrollHorizontal\">Scroll Horizontal</mat-option>\n      <mat-option value=\"fixed\">Fixed</mat-option>\n      <mat-option value=\"verticalFixed\">Vertical Fixed</mat-option>\n      <mat-option value=\"horizontalFixed\">Horizontal Fixed</mat-option>\n    </mat-select>\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.fixedColWidth\" type=\"number\" placeholder=\"Fixed Col Width\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.fixedRowHeight\" type=\"number\" placeholder=\"Fixed Row Height\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-checkbox [(ngModel)]=\"options.setGridSize\" (ngModelChange)=\"changedOptions()\">\n    Set Grid Size\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.keepFixedHeightInMobile\" (ngModelChange)=\"changedOptions()\">\n    Keep Fixed Height In Mobile\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.keepFixedWidthInMobile\" (ngModelChange)=\"changedOptions()\">\n    Keep Fixed Width In Mobile\n  </mat-checkbox>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.mobileBreakpoint\" type=\"number\" placeholder=\"Mobile Breakpoint\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <button mat-mini-fab (click)=\"addItem()\" class=\"add-button cols-2\">\n    <mat-icon>add</mat-icon>\n  </button>\n</div>\n\n\n<gridster [options]=\"options\">\n  <gridster-item [item]=\"item\" *ngFor=\"let item of dashboard\">\n    <div class=\"button-holder\">\n      <button mat-mini-fab (mousedown)=\"removeItem($event, item)\"\n              (touchstart)=\"removeItem($event, item)\">\n        <mat-icon>delete</mat-icon>\n      </button>\n    </div>\n  </gridster-item>\n</gridster>\n","import {ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation} from '@angular/core';\n\nimport {CompactType, DisplayGrid, Draggable, GridsterConfig, GridsterItem, GridType, PushDirections, Resizable} from 'angular-gridster2';\n\ninterface Safe extends GridsterConfig {\n  draggable: Draggable;\n  resizable: Resizable;\n  pushDirections: PushDirections;\n}\n\n@Component({\n  selector: 'app-general',\n  templateUrl: './home.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class HomeComponent implements OnInit {\n  options: Safe;\n  dashboard: Array<GridsterItem>;\n\n  ngOnInit() {\n    this.options = {\n      gridType: GridType.Fit,\n      compactType: CompactType.None,\n      margin: 10,\n      outerMargin: true,\n      outerMarginTop: null,\n      outerMarginRight: null,\n      outerMarginBottom: null,\n      outerMarginLeft: null,\n      useTransformPositioning: true,\n      mobileBreakpoint: 640,\n      minCols: 1,\n      maxCols: 100,\n      minRows: 1,\n      maxRows: 100,\n      maxItemCols: 100,\n      minItemCols: 1,\n      maxItemRows: 100,\n      minItemRows: 1,\n      maxItemArea: 2500,\n      minItemArea: 1,\n      defaultItemCols: 1,\n      defaultItemRows: 1,\n      fixedColWidth: 105,\n      fixedRowHeight: 105,\n      keepFixedHeightInMobile: false,\n      keepFixedWidthInMobile: false,\n      scrollSensitivity: 10,\n      scrollSpeed: 20,\n      enableEmptyCellClick: false,\n      enableEmptyCellContextMenu: false,\n      enableEmptyCellDrop: false,\n      enableEmptyCellDrag: false,\n      enableOccupiedCellDrop: false,\n      emptyCellDragMaxCols: 50,\n      emptyCellDragMaxRows: 50,\n      ignoreMarginInRow: false,\n      draggable: {\n        enabled: true,\n      },\n      resizable: {\n        enabled: true,\n      },\n      swap: false,\n      pushItems: true,\n      disablePushOnDrag: false,\n      disablePushOnResize: false,\n      pushDirections: {north: true, east: true, south: true, west: true},\n      pushResizeItems: false,\n      displayGrid: DisplayGrid.Always,\n      disableWindowResize: false,\n      disableWarnings: false,\n      scrollToNewItems: false\n    };\n\n    this.dashboard = [\n      {cols: 2, rows: 1, y: 0, x: 0},\n      {cols: 2, rows: 2, y: 0, x: 2, hasContent: true},\n      {cols: 1, rows: 1, y: 0, x: 4},\n      {cols: 1, rows: 1, y: 2, x: 5},\n      {cols: 1, rows: 1, y: 1, x: 0},\n      {cols: 1, rows: 1, y: 1, x: 0},\n      {cols: 2, rows: 2, y: 3, x: 5, minItemRows: 2, minItemCols: 2, label: 'Min rows & cols = 2'},\n      {cols: 2, rows: 2, y: 2, x: 0, maxItemRows: 2, maxItemCols: 2, label: 'Max rows & cols = 2'},\n      {cols: 2, rows: 1, y: 2, x: 2, dragEnabled: true, resizeEnabled: true, label: 'Drag&Resize Enabled'},\n      {cols: 1, rows: 1, y: 2, x: 4, dragEnabled: false, resizeEnabled: false, label: 'Drag&Resize Disabled'},\n      {cols: 1, rows: 1, y: 2, x: 6}\n    ];\n  }\n\n  changedOptions() {\n    if (this.options.api && this.options.api.optionsChanged) {\n      this.options.api.optionsChanged();\n    }\n  }\n\n  removeItem($event, item) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    this.dashboard.splice(this.dashboard.indexOf(item), 1);\n  }\n\n  addItem() {\n    this.dashboard.push({x: 0, y: 0, cols: 1, rows: 1});\n  }\n}\n","<div class=\"options\">\n  <a mat-raised-button href=\"https://github.com/tiberiuzuld/angular-gridster2/tree/master/src/app/sections/home\"\n     target=\"_blank\" class=\"source-code-button\">\n    <mat-icon>open_in_new</mat-icon>\n    Source\n  </a>\n</div>\n<div class=\"options-header\">\n  <mat-form-field>\n    <mat-select aria-label=\"Grid type\" [(ngModel)]=\"options.gridType\" (ngModelChange)=\"changedOptions()\"\n                placeholder=\"Grid Type\">\n      <mat-option value=\"fit\">Fit to screen</mat-option>\n      <mat-option value=\"scrollVertical\">Scroll Vertical</mat-option>\n      <mat-option value=\"scrollHorizontal\">Scroll Horizontal</mat-option>\n      <mat-option value=\"fixed\">Fixed</mat-option>\n      <mat-option value=\"verticalFixed\">Vertical Fixed</mat-option>\n      <mat-option value=\"horizontalFixed\">Horizontal Fixed</mat-option>\n    </mat-select>\n  </mat-form-field>\n  <mat-form-field>\n    <mat-select aria-label=\"Display grid lines\" [(ngModel)]=\"options.displayGrid\"\n                placeholder=\"Display grid lines\"\n                (ngModelChange)=\"changedOptions()\">\n      <mat-option value=\"always\">Always</mat-option>\n      <mat-option value=\"onDrag&Resize\">On Drag & Resize</mat-option>\n      <mat-option value=\"none\">None</mat-option>\n    </mat-select>\n  </mat-form-field>\n\n  <mat-checkbox [(ngModel)]=\"options.swap\" (ngModelChange)=\"changedOptions()\">\n    Swap Items\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.pushItems\" (ngModelChange)=\"changedOptions()\">\n    Push Items\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.draggable.enabled\" *ngIf=\"options.draggable\" (ngModelChange)=\"changedOptions()\">\n    Drag Items\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.resizable.enabled\" *ngIf=\"options.resizable\" (ngModelChange)=\"changedOptions()\">\n    Resize Items\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.pushResizeItems\" (ngModelChange)=\"changedOptions()\">\n    Push Resize Items\n  </mat-checkbox>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.margin\" min=\"0\" max=\"30\" step=\"1\" type=\"number\" placeholder=\"Margin\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-checkbox [(ngModel)]=\"options.outerMargin\" (ngModelChange)=\"changedOptions()\">Outer Margin</mat-checkbox>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.mobileBreakpoint\" type=\"number\" placeholder=\"Mobile Breakpoint\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.fixedColWidth\" type=\"number\" placeholder=\"Fixed Col Width\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.fixedRowHeight\" type=\"number\" placeholder=\"Fixed Row Height\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <button mat-mini-fab (click)=\"addItem()\" class=\"add-button cols-2\">\n    <mat-icon>add</mat-icon>\n  </button>\n</div>\n\n<gridster [options]=\"options\">\n  <gridster-item [item]=\"item\" *ngFor=\"let item of dashboard\">\n    <div class=\"button-holder\">\n      <div class=\"gridster-item-content\" *ngIf=\"item.hasContent\">\n        <div class=\"stuff\">\n          <span>Some content to select and click without dragging the widget</span>\n          <a href=\"https://www.google.com\" target=\"_blank\">Link to Google</a>\n        </div>\n      </div>\n      <div class=\"item-buttons\" *ngIf=\"item.hasContent\">\n        <button mat-icon-button mat-raised-button class=\"drag-handler\">\n          <mat-icon>open_with</mat-icon>\n        </button>\n        <button mat-icon-button mat-raised-button class=\"remove-button\" (mousedown)=\"removeItem($event, item)\"\n                (touchstart)=\"removeItem($event, item)\">\n          <mat-icon>delete</mat-icon>\n        </button>\n      </div>\n      <label *ngIf=\"!item.hasContent\">{{item.label}}</label>\n      <button mat-mini-fab *ngIf=\"!item.hasContent\" (mousedown)=\"removeItem($event, item)\"\n              (touchstart)=\"removeItem($event, item)\">\n        <mat-icon>delete</mat-icon>\n      </button>\n    </div>\n  </gridster-item>\n</gridster>\n","import {ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation} from '@angular/core';\n\nimport {CompactType, DisplayGrid, GridsterConfig, GridsterItem, GridsterItemComponentInterface, GridType} from 'angular-gridster2';\n\n@Component({\n  selector: 'app-items',\n  templateUrl: './items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class ItemsComponent implements OnInit {\n  options: GridsterConfig;\n  dashboard: Array<GridsterItem>;\n\n  static itemInit(item: GridsterItem, itemComponent: GridsterItemComponentInterface) {\n    console.info('itemInitialized', item, itemComponent);\n  }\n\n  ngOnInit() {\n    this.options = {\n      gridType: GridType.Fit,\n      displayGrid: DisplayGrid.Always,\n      compactType: CompactType.None,\n      pushItems: true,\n      draggable: {\n        enabled: true\n      },\n      resizable: {\n        enabled: true\n      },\n      minCols: 1,\n      maxCols: 100,\n      minRows: 1,\n      maxRows: 100,\n      maxItemCols: 100,\n      minItemCols: 1,\n      maxItemRows: 100,\n      minItemRows: 1,\n      maxItemArea: 2500,\n      minItemArea: 1,\n      defaultItemCols: 1,\n      defaultItemRows: 1\n    };\n\n    this.dashboard = [\n      {\n        cols: 2,\n        rows: 1,\n        y: 0,\n        x: 0,\n        initCallback: ItemsComponent.itemInit,\n        minItemCols: 1,\n        maxItemCols: 100,\n        maxItemRows: 100,\n        minItemRows: 1,\n        minItemArea: 1,\n        maxItemArea: 2500,\n        dragEnabled: true,\n        resizeEnabled: true,\n        compactEnabled: true\n      },\n      {cols: 2, rows: 2, y: 0, x: 2},\n      {cols: 1, rows: 1, y: 0, x: 4},\n      {cols: 3, rows: 2, y: 1, x: 4},\n      {cols: 1, rows: 1, y: 2, x: 1}\n    ];\n  }\n\n  changedOptions() {\n    if (this.options.api && this.options.api.optionsChanged) {\n      this.options.api.optionsChanged();\n    }\n  }\n\n  removeItem($event, item) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    this.dashboard.splice(this.dashboard.indexOf(item), 1);\n  }\n\n  addItem() {\n    this.dashboard.push({x: 0, y: 0, cols: 1, rows: 1});\n  }\n}\n","<div class=\"options\">\n  <a mat-raised-button href=\"https://github.com/tiberiuzuld/angular-gridster2/tree/master/src/app/sections/items\"\n     target=\"_blank\" class=\"source-code-button\">\n    <mat-icon>open_in_new</mat-icon>\n    Source\n  </a>\n  <markdown [src]=\"'assets/items.md'\"></markdown>\n</div>\n<div class=\"options-header\" *ngIf=\"dashboard[0]\">\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"dashboard[0].x\" type=\"number\" placeholder=\"X\" (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"dashboard[0].y\" type=\"number\" placeholder=\"Y\" (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"dashboard[0].rows\" type=\"number\" placeholder=\"Rows\" (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"dashboard[0].cols\" type=\"number\" placeholder=\"Cols\" (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"dashboard[0].maxItemCols\" type=\"number\" placeholder=\"Max Item Cols\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"dashboard[0].minItemCols\" type=\"number\" placeholder=\"Min Item Cols\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"dashboard[0].maxItemRows\" type=\"number\" placeholder=\"Max Item Rows\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"dashboard[0].minItemRows\" type=\"number\" placeholder=\"Min Item Rows\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"dashboard[0].maxItemArea\" type=\"number\" placeholder=\"Max Item Area\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"dashboard[0].minItemArea\" type=\"number\" placeholder=\"Min Item Area\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-checkbox [(ngModel)]=\"dashboard[0].dragEnabled\" (ngModelChange)=\"changedOptions()\">\n    Drag\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"dashboard[0].resizeEnabled\" (ngModelChange)=\"changedOptions()\">\n    Resize\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"dashboard[0].compactEnabled\" (ngModelChange)=\"changedOptions()\">\n    Compact\n  </mat-checkbox>\n  <mat-form-field>\n    <mat-select aria-label=\"Compact type\" [(ngModel)]=\"options.compactType\" (ngModelChange)=\"changedOptions()\"\n                placeholder=\"Compact Type\">\n      <mat-option value=\"none\">None</mat-option>\n      <mat-option value=\"compactUp\">Compact Up</mat-option>\n      <mat-option value=\"compactLeft\">Compact Left</mat-option>\n      <mat-option value=\"compactLeft&Up\">Compact Left & Up</mat-option>\n      <mat-option value=\"compactUp&Left\">Compact Up & Left</mat-option>\n    </mat-select>\n  </mat-form-field>\n  <button mat-mini-fab (click)=\"addItem()\" class=\"add-button cols-2\">\n    <mat-icon>add</mat-icon>\n  </button>\n</div>\n\n\n<gridster [options]=\"options\">\n  <gridster-item [item]=\"item\" *ngFor=\"let item of dashboard\">\n    <div class=\"button-holder\">\n      <button mat-mini-fab (mousedown)=\"removeItem($event, item)\"\n              (touchstart)=\"removeItem($event, item)\">\n        <mat-icon>delete</mat-icon>\n      </button>\n    </div>\n  </gridster-item>\n</gridster>\n","import {ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation} from '@angular/core';\n\nimport {DisplayGrid, GridsterConfig, GridsterItem, GridType} from 'angular-gridster2';\n\n@Component({\n  selector: 'app-misc',\n  templateUrl: './misc.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class MiscComponent implements OnInit {\n  options: GridsterConfig;\n  dashboard: Array<GridsterItem>;\n\n  ngOnInit() {\n    this.options = {\n      gridType: GridType.Fit,\n      displayGrid: DisplayGrid.Always,\n      disableWindowResize: false,\n      scrollToNewItems: false,\n      disableWarnings: false,\n      ignoreMarginInRow: false\n    };\n\n    this.dashboard = [\n      {cols: 2, rows: 1, y: 0, x: 0},\n      {cols: 2, rows: 2, y: 0, x: 2},\n      {cols: 1, rows: 1, y: 0, x: 4},\n      {cols: 3, rows: 2, y: 1, x: 4},\n      {cols: 1, rows: 1, y: 4, x: 5},\n      {cols: 1, rows: 1, y: 2, x: 1},\n      {cols: 2, rows: 2, y: 5, x: 5},\n      {cols: 2, rows: 2, y: 3, x: 2},\n      {cols: 2, rows: 1, y: 2, x: 2},\n      {cols: 1, rows: 1, y: 3, x: 4},\n      {cols: 1, rows: 1, y: 0, x: 6}\n    ];\n  }\n\n  changedOptions() {\n    if (this.options.api && this.options.api.optionsChanged) {\n      this.options.api.optionsChanged();\n    }\n  }\n\n  removeItem($event, item) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    this.dashboard.splice(this.dashboard.indexOf(item), 1);\n  }\n\n  addItem() {\n    this.dashboard.push({x: 0, y: 0, cols: 1, rows: 1});\n  }\n}\n","<div class=\"options\">\n  <a mat-raised-button href=\"https://github.com/tiberiuzuld/angular-gridster2/tree/master/src/app/sections/misc\"\n     target=\"_blank\" class=\"source-code-button\">\n    <mat-icon>open_in_new</mat-icon>\n    Source\n  </a>\n  <markdown [src]=\"'assets/misc.md'\"></markdown>\n</div>\n<div class=\"options-header\">\n  <mat-checkbox [(ngModel)]=\"options.disableWindowResize\" (ngModelChange)=\"changedOptions()\">\n    Disable window resize\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.scrollToNewItems\" (ngModelChange)=\"changedOptions()\">\n    Scroll to new items\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.disableWarnings\" (ngModelChange)=\"changedOptions()\">\n    Disable console warnings\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.ignoreMarginInRow\" (ngModelChange)=\"changedOptions()\">\n    Ignore margin in row\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.disableAutoPositionOnConflict\" (ngModelChange)=\"changedOptions()\">\n    Disable auto position on conflict\n  </mat-checkbox>\n  <mat-form-field>\n    <mat-select aria-label=\"Grid type\" [(ngModel)]=\"options.gridType\" (ngModelChange)=\"changedOptions()\"\n                placeholder=\"Grid Type\">\n      <mat-option value=\"fit\">Fit to screen</mat-option>\n      <mat-option value=\"scrollVertical\">Scroll Vertical</mat-option>\n      <mat-option value=\"scrollHorizontal\">Scroll Horizontal</mat-option>\n      <mat-option value=\"fixed\">Fixed</mat-option>\n      <mat-option value=\"verticalFixed\">Vertical Fixed</mat-option>\n      <mat-option value=\"horizontalFixed\">Horizontal Fixed</mat-option>\n    </mat-select>\n  </mat-form-field>\n  <button mat-mini-fab (click)=\"addItem()\" class=\"add-button cols-2\">\n    <mat-icon>add</mat-icon>\n  </button>\n</div>\n\n\n<gridster [options]=\"options\">\n  <gridster-item [item]=\"item\" *ngFor=\"let item of dashboard\">\n    <div class=\"button-holder\">\n      <button mat-mini-fab (mousedown)=\"removeItem($event, item)\"\n              (touchstart)=\"removeItem($event, item)\">\n        <mat-icon>delete</mat-icon>\n      </button>\n    </div>\n  </gridster-item>\n</gridster>\n","/**\n * Created by YISH on 2020/02/28.\n */\nimport {ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation} from '@angular/core';\nimport {DisplayGrid, GridsterConfig, GridsterItem, GridType} from 'angular-gridster2';\n\n@Component({\n  selector: 'app-swap',\n  templateUrl: './multi-layer.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class MultiLayerComponent implements OnInit {\n  options: GridsterConfig;\n  dashboard: Array<GridsterItem>;\n\n  // noinspection DuplicatedCode\n  ngOnInit() {\n    this.options = {\n      gridType: GridType.Fit,\n      displayGrid: DisplayGrid.Always,\n      pushItems: false,\n      swap: true,\n      allowMultiLayer: true,\n      defaultLayerIndex: 1,\n      baseLayerIndex: 2,\n      maxLayerIndex: 2,\n      swapWhileDragging: false,\n      draggable: {\n        enabled: true\n      },\n      resizable: {\n        enabled: true\n      }\n    };\n\n    this.dashboard = [\n      {cols: 2, rows: 1, y: 0, x: 0, layerIndex: 2},\n      {cols: 2, rows: 2, y: 0, x: 2},\n      {cols: 1, rows: 1, y: 0, x: 4},\n      {cols: 3, rows: 2, y: 1, x: 4},\n      {cols: 1, rows: 1, y: 4, x: 5},\n      {cols: 1, rows: 1, y: 2, x: 1},\n      {cols: 2, rows: 2, y: 5, x: 5},\n      {cols: 2, rows: 2, y: 3, x: 2},\n      {cols: 2, rows: 1, y: 2, x: 2},\n      {cols: 1, rows: 1, y: 3, x: 4},\n      {cols: 1, rows: 1, y: 0, x: 6}\n    ];\n  }\n\n  changedOptions() {\n    if (this.options.api && this.options.api.optionsChanged) {\n      this.options.api.optionsChanged();\n    }\n  }\n  bringToFront(item: GridsterItem) {\n    if (item.layerIndex === undefined) {\n      item.layerIndex = 2;\n    } else {\n      item.layerIndex += 1;\n    }\n  }\n  sendToBack(item: GridsterItem) {\n    if (item.layerIndex === undefined) {\n      item.layerIndex = 0;\n    } else {\n      item.layerIndex -= 1;\n    }\n  }\n\n  removeItem($event, item: GridsterItem) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    this.dashboard.splice(this.dashboard.indexOf(item), 1);\n  }\n\n  addItem() {\n    this.dashboard.push({x: 0, y: 0, cols: 2, rows: 1});\n  }\n}\n","<div class=\"options\">\n  <a mat-raised-button href=\"https://github.com/tiberiuzuld/angular-gridster2/tree/master/src/app/sections/swap\"\n     target=\"_blank\" class=\"source-code-button\">\n    <mat-icon>open_in_new</mat-icon>\n    Source\n  </a>\n  <markdown [src]=\"'assets/multiLayer.md'\"></markdown>\n</div>\n<div class=\"options-header\">\n  <mat-checkbox [(ngModel)]=\"options.allowMultiLayer\" (ngModelChange)=\"changedOptions()\">\n    Allow Multi Layer\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.swap\" (ngModelChange)=\"changedOptions()\">\n    Swap Items\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.swapWhileDragging\" (ngModelChange)=\"changedOptions()\">\n    Swap Items While Dragging\n  </mat-checkbox>\n  <button mat-mini-fab (click)=\"addItem()\" class=\"add-button cols-2\">\n    <mat-icon>add</mat-icon>\n  </button>\n</div>\n\n\n<gridster [options]=\"options\">\n  <gridster-item #gridsterItem [item]=\"item\" *ngFor=\"let item of dashboard\">\n    <div>\n      <button mat-icon-button [matMenuTriggerFor]=\"menu\" aria-label=\"Example icon-button with a menu\">\n        <mat-icon>more_vert</mat-icon>\n      </button>\n      <mat-menu #menu=\"matMenu\">\n        <button mat-menu-item (click)=\"gridsterItem.bringToFront(1);\">\n          <mat-icon>arrow_upward</mat-icon>\n          <span>Bring To Front</span>\n        </button>\n        <button mat-menu-item (click)=\"gridsterItem.sendToBack(1);\">\n          <mat-icon>arrow_downward</mat-icon>\n          <span>Send To Back</span>\n        </button>\n      </mat-menu>\n\n      <span>LayerIndex: <span style=\"margin-left: 10px; color: blueviolet\">{{item.layerIndex === undefined ? 1 : item.layerIndex}}</span></span>\n\n      <div class=\"button-holder\">\n        <button mat-mini-fab (mousedown)=\"removeItem($event, item)\"\n                (touchstart)=\"removeItem($event, item)\">\n          <mat-icon>delete</mat-icon>\n        </button>\n      </div>\n    </div>\n  </gridster-item>\n</gridster>\n","import {ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation} from '@angular/core';\n\nimport {DisplayGrid, Draggable, GridsterConfig, GridsterItem, GridType, PushDirections, Resizable} from 'angular-gridster2';\n\ninterface Safe extends GridsterConfig {\n  draggable: Draggable;\n  resizable: Resizable;\n  pushDirections: PushDirections;\n}\n\n@Component({\n  selector: 'app-push',\n  templateUrl: './push.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class PushComponent implements OnInit {\n  options: Safe;\n  dashboard: Array<GridsterItem>;\n\n  ngOnInit() {\n    this.options = {\n      gridType: GridType.Fit,\n      displayGrid: DisplayGrid.Always,\n      pushItems: true,\n      pushDirections: {north: true, east: true, south: true, west: true},\n      pushResizeItems: false,\n      swap: false,\n      draggable: {\n        enabled: true\n      },\n      resizable: {\n        enabled: true\n      }\n    };\n\n    this.dashboard = [\n      {cols: 2, rows: 1, y: 0, x: 0},\n      {cols: 2, rows: 2, y: 0, x: 2},\n      {cols: 1, rows: 1, y: 0, x: 4},\n      {cols: 3, rows: 2, y: 1, x: 4},\n      {cols: 1, rows: 1, y: 4, x: 5},\n      {cols: 1, rows: 1, y: 2, x: 1},\n      {cols: 2, rows: 2, y: 5, x: 5},\n      {cols: 2, rows: 2, y: 3, x: 2},\n      {cols: 2, rows: 1, y: 2, x: 2},\n      {cols: 1, rows: 1, y: 3, x: 4},\n      {cols: 1, rows: 1, y: 0, x: 6}\n    ];\n  }\n\n  changedOptions() {\n    if (this.options.api && this.options.api.optionsChanged) {\n      this.options.api.optionsChanged();\n    }\n  }\n\n  removeItem($event, item) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    this.dashboard.splice(this.dashboard.indexOf(item), 1);\n  }\n\n  addItem() {\n    this.dashboard.push({x: 0, y: 0, cols: 1, rows: 1});\n  }\n}\n","<div class=\"options\">\n  <a mat-raised-button href=\"https://github.com/tiberiuzuld/angular-gridster2/tree/master/src/app/sections/push\"\n     target=\"_blank\" class=\"source-code-button\">\n    <mat-icon>open_in_new</mat-icon>\n    Source\n  </a>\n  <markdown [src]=\"'assets/push.md'\"></markdown>\n</div>\n<div class=\"options-header\">\n  <mat-checkbox [(ngModel)]=\"options.pushItems\" (ngModelChange)=\"changedOptions()\">\n    Push Items\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.disablePushOnDrag\" (ngModelChange)=\"changedOptions()\">\n    Disable Push On Drag\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.disablePushOnResize\" (ngModelChange)=\"changedOptions()\">\n    Disable Push On Resize\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.pushDirections.north\" *ngIf=\"options.pushDirections\"\n                (ngModelChange)=\"changedOptions()\">\n    Push North\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.pushDirections.east\" *ngIf=\"options.pushDirections\"\n                (ngModelChange)=\"changedOptions()\">\n    Push East\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.pushDirections.south\" *ngIf=\"options.pushDirections\"\n                (ngModelChange)=\"changedOptions()\">\n    Push South\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.pushDirections.west\" *ngIf=\"options.pushDirections\"\n                (ngModelChange)=\"changedOptions()\">\n    Push West\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.pushResizeItems\" (ngModelChange)=\"changedOptions()\">\n    Push Resize Items\n  </mat-checkbox>\n  <button mat-mini-fab (click)=\"addItem()\" class=\"add-button cols-2\">\n    <mat-icon>add</mat-icon>\n  </button>\n</div>\n\n\n<gridster [options]=\"options\">\n  <gridster-item [item]=\"item\" *ngFor=\"let item of dashboard\">\n    <div class=\"button-holder\">\n      <button mat-mini-fab (mousedown)=\"removeItem($event, item)\"\n              (touchstart)=\"removeItem($event, item)\">\n        <mat-icon>delete</mat-icon>\n      </button>\n    </div>\n  </gridster-item>\n</gridster>\n","import {ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation} from '@angular/core';\n\nimport {DisplayGrid, GridsterConfig, GridsterItem, GridsterItemComponentInterface, GridType, Resizable} from 'angular-gridster2';\n\ninterface SafeResizable extends Resizable {\n  handles: {\n    s: boolean,\n    e: boolean,\n    n: boolean,\n    w: boolean,\n    se: boolean,\n    ne: boolean,\n    sw: boolean,\n    nw: boolean\n  };\n}\n\ninterface Safe extends GridsterConfig {\n  resizable: SafeResizable;\n}\n\n@Component({\n  selector: 'app-resize',\n  templateUrl: './resize.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class ResizeComponent implements OnInit {\n  options: Safe;\n  dashboard: Array<GridsterItem>;\n\n  static eventStop(item: GridsterItem, itemComponent: GridsterItemComponentInterface, event: MouseEvent) {\n    console.info('eventStop', item, itemComponent, event);\n  }\n\n  static eventStart(item: GridsterItem, itemComponent: GridsterItemComponentInterface, event: MouseEvent) {\n    console.info('eventStart', item, itemComponent, event);\n  }\n\n  ngOnInit() {\n    this.options = {\n      gridType: GridType.Fit,\n      displayGrid: DisplayGrid.Always,\n      resizable: {\n        delayStart: 0,\n        enabled: true,\n        start: ResizeComponent.eventStart,\n        stop: ResizeComponent.eventStop,\n        handles: {\n          s: true,\n          e: true,\n          n: true,\n          w: true,\n          se: true,\n          ne: true,\n          sw: true,\n          nw: true\n        }\n      },\n    };\n\n    this.dashboard = [\n      {cols: 2, rows: 1, y: 0, x: 0},\n      {cols: 2, rows: 2, y: 0, x: 2},\n      {cols: 1, rows: 1, y: 0, x: 4},\n      {cols: 3, rows: 2, y: 1, x: 4},\n      {cols: 1, rows: 1, y: 4, x: 5},\n      {cols: 1, rows: 1, y: 2, x: 1},\n      {cols: 2, rows: 2, y: 5, x: 5},\n      {cols: 2, rows: 2, y: 3, x: 2},\n      {cols: 2, rows: 1, y: 2, x: 2},\n      {cols: 1, rows: 1, y: 3, x: 4},\n      {cols: 1, rows: 1, y: 0, x: 6}\n    ];\n  }\n\n  changedOptions() {\n    if (this.options.api && this.options.api.optionsChanged) {\n      this.options.api.optionsChanged();\n    }\n  }\n\n  removeItem($event, item) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    this.dashboard.splice(this.dashboard.indexOf(item), 1);\n  }\n\n  addItem() {\n    this.dashboard.push({x: 0, y: 0, cols: 1, rows: 1});\n  }\n}\n","<div class=\"options\">\n  <a mat-raised-button href=\"https://github.com/tiberiuzuld/angular-gridster2/tree/master/src/app/sections/resize\"\n     target=\"_blank\" class=\"source-code-button\">\n    <mat-icon>open_in_new</mat-icon>\n    Source\n  </a>\n  <markdown [src]=\"'assets/resize.md'\"></markdown>\n</div>\n<div class=\"options-header\" *ngIf=\"options.resizable && options.resizable.handles\">\n  <mat-checkbox [(ngModel)]=\"options.resizable.enabled\" (ngModelChange)=\"changedOptions()\">\n    Resize Items\n  </mat-checkbox>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.resizable.delayStart\" type=\"number\" placeholder=\"Delay Start ms\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-checkbox [(ngModel)]=\"options.resizable.handles.s\"\n                (ngModelChange)=\"changedOptions()\">\n    Resize South\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.resizable.handles.e\"\n                (ngModelChange)=\"changedOptions()\">\n    Resize East\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.resizable.handles.n\"\n                (ngModelChange)=\"changedOptions()\">\n    Resize North\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.resizable.handles.w\"\n                (ngModelChange)=\"changedOptions()\">\n    Resize West\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.resizable.handles.se\"\n                (ngModelChange)=\"changedOptions()\">\n    Resize South-East\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.resizable.handles.ne\"\n                (ngModelChange)=\"changedOptions()\">\n    Resize North-East\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.resizable.handles.sw\"\n                (ngModelChange)=\"changedOptions()\">\n    Resize South-West\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.resizable.handles.nw\"\n                (ngModelChange)=\"changedOptions()\">\n    Resize North-West\n  </mat-checkbox>\n  <button mat-mini-fab (click)=\"addItem()\" class=\"add-button cols-2\">\n    <mat-icon>add</mat-icon>\n  </button>\n</div>\n\n\n<gridster [options]=\"options\">\n  <gridster-item [item]=\"item\" *ngFor=\"let item of dashboard\">\n    <div class=\"button-holder\">\n      <button mat-mini-fab (mousedown)=\"removeItem($event, item)\"\n              (touchstart)=\"removeItem($event, item)\">\n        <mat-icon>delete</mat-icon>\n      </button>\n    </div>\n  </gridster-item>\n</gridster>\n","import {ChangeDetectionStrategy, Component, OnDestroy, OnInit, ViewEncapsulation} from '@angular/core';\nimport {CompactType, DirTypes, DisplayGrid, Draggable, GridsterConfig, GridsterItem, GridType, Resizable} from 'angular-gridster2';\n\ninterface Safe extends GridsterConfig {\n  draggable: Draggable;\n  resizable: Resizable;\n}\n\n@Component({\n  selector: 'app-rtl',\n  templateUrl: './rtl.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class RtlComponent implements OnInit, OnDestroy {\n  options: Safe;\n  dashboard: Array<GridsterItem>;\n\n  ngOnInit() {\n    document.body.setAttribute('dir', 'rtl');\n\n    this.options = {\n      gridType: GridType.Fit,\n      compactType: CompactType.None,\n      margin: 10,\n      outerMargin: true,\n      outerMarginTop: null,\n      outerMarginRight: null,\n      outerMarginBottom: null,\n      outerMarginLeft: null,\n      useTransformPositioning: true,\n      mobileBreakpoint: 640,\n      minCols: 1,\n      maxCols: 100,\n      minRows: 1,\n      maxRows: 100,\n      maxItemCols: 100,\n      minItemCols: 1,\n      maxItemRows: 100,\n      minItemRows: 1,\n      maxItemArea: 2500,\n      minItemArea: 1,\n      defaultItemCols: 1,\n      defaultItemRows: 1,\n      fixedColWidth: 105,\n      fixedRowHeight: 105,\n      keepFixedHeightInMobile: false,\n      keepFixedWidthInMobile: false,\n      scrollSensitivity: 10,\n      scrollSpeed: 20,\n      enableEmptyCellClick: false,\n      enableEmptyCellContextMenu: false,\n      enableEmptyCellDrop: false,\n      enableEmptyCellDrag: false,\n      enableOccupiedCellDrop: false,\n      emptyCellDragMaxCols: 50,\n      emptyCellDragMaxRows: 50,\n      ignoreMarginInRow: false,\n      draggable: {\n        enabled: true,\n      },\n      resizable: {\n        enabled: true,\n      },\n      swap: false,\n      pushItems: true,\n      disablePushOnDrag: false,\n      disablePushOnResize: false,\n      pushDirections: {north: true, east: true, south: true, west: true},\n      pushResizeItems: false,\n      displayGrid: DisplayGrid.Always,\n      disableWindowResize: false,\n      disableWarnings: false,\n      scrollToNewItems: false,\n      dirType: DirTypes.RTL\n    };\n\n    this.dashboard = [\n      {cols: 2, rows: 1, y: 0, x: 0},\n      {cols: 2, rows: 2, y: 0, x: 2, hasContent: true},\n      {cols: 1, rows: 1, y: 0, x: 4},\n      {cols: 1, rows: 1, y: 2, x: 5},\n      {cols: 1, rows: 1, y: 1, x: 0},\n      {cols: 1, rows: 1, y: 1, x: 0},\n      {cols: 2, rows: 2, y: 3, x: 5, minItemRows: 2, minItemCols: 2, label: 'Min rows & cols = 2'},\n      {cols: 2, rows: 2, y: 2, x: 0, maxItemRows: 2, maxItemCols: 2, label: 'Max rows & cols = 2'},\n      {cols: 2, rows: 1, y: 2, x: 2, dragEnabled: true, resizeEnabled: true, label: 'Drag&Resize Enabled'},\n      {cols: 1, rows: 1, y: 2, x: 4, dragEnabled: false, resizeEnabled: false, label: 'Drag&Resize Disabled'},\n      {cols: 1, rows: 1, y: 2, x: 6}\n    ];\n\n    this.dashboard = [\n      {cols: 2, rows: 1, y: 0, x: 0},\n      {cols: 2, rows: 2, y: 0, x: 2, hasContent: true},\n      {cols: 1, rows: 1, y: 0, x: 4},\n      {cols: 1, rows: 1, y: 2, x: 5},\n      {cols: 1, rows: 1, y: 1, x: 0},\n      {cols: 1, rows: 1, y: 1, x: 0},\n      {cols: 2, rows: 2, y: 3, x: 5, minItemRows: 2, minItemCols: 2, label: 'Min rows & cols = 2'},\n      {cols: 2, rows: 2, y: 2, x: 0, maxItemRows: 2, maxItemCols: 2, label: 'Max rows & cols = 2'},\n      {cols: 2, rows: 1, y: 2, x: 2, dragEnabled: true, resizeEnabled: true, label: 'Drag&Resize Enabled'},\n      {cols: 1, rows: 1, y: 2, x: 4, dragEnabled: false, resizeEnabled: false, label: 'Drag&Resize Disabled'},\n      {cols: 1, rows: 1, y: 2, x: 6}\n    ];\n  }\n\n  changedOptions() {\n    if (this.options.api && this.options.api.optionsChanged) {\n      this.options.api.optionsChanged();\n    }\n  }\n\n  removeItem($event, item) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    this.dashboard.splice(this.dashboard.indexOf(item), 1);\n  }\n\n  addItem() {\n    this.dashboard.push({x: 0, y: 0, cols: 1, rows: 1});\n  }\n\n  ngOnDestroy(): void {\n    document.body.removeAttribute('dir');\n  }\n}\n","<div class=\"options\">\n  <a mat-raised-button href=\"https://github.com/tiberiuzuld/angular-gridster2/tree/master/src/app/sections/rtl\"\n     target=\"_blank\" class=\"source-code-button\">\n    <mat-icon>open_in_new</mat-icon>\n    Source\n  </a>\n</div>\n<div class=\"options-header\">\n  <mat-form-field>\n    <mat-select aria-label=\"Grid type\" [(ngModel)]=\"options.gridType\" (ngModelChange)=\"changedOptions()\"\n                placeholder=\"Grid Type\">\n      <mat-option value=\"fit\">Fit to screen</mat-option>\n      <mat-option value=\"scrollVertical\">Scroll Vertical</mat-option>\n      <mat-option value=\"scrollHorizontal\">Scroll Horizontal</mat-option>\n      <mat-option value=\"fixed\">Fixed</mat-option>\n      <mat-option value=\"verticalFixed\">Vertical Fixed</mat-option>\n      <mat-option value=\"horizontalFixed\">Horizontal Fixed</mat-option>\n    </mat-select>\n  </mat-form-field>\n  <mat-form-field>\n    <mat-select aria-label=\"Display grid lines\" [(ngModel)]=\"options.displayGrid\"\n                placeholder=\"Display grid lines\"\n                (ngModelChange)=\"changedOptions()\">\n      <mat-option value=\"always\">Always</mat-option>\n      <mat-option value=\"onDrag&Resize\">On Drag & Resize</mat-option>\n      <mat-option value=\"none\">None</mat-option>\n    </mat-select>\n  </mat-form-field>\n\n  <mat-checkbox [(ngModel)]=\"options.swap\" (ngModelChange)=\"changedOptions()\">\n    Swap Items\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.pushItems\" (ngModelChange)=\"changedOptions()\">\n    Push Items\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.draggable.enabled\" *ngIf=\"options.draggable\" (ngModelChange)=\"changedOptions()\">\n    Drag Items\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.resizable.enabled\" *ngIf=\"options.resizable\" (ngModelChange)=\"changedOptions()\">\n    Resize Items\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.pushResizeItems\" (ngModelChange)=\"changedOptions()\">\n    Push Resize Items\n  </mat-checkbox>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.margin\" min=\"0\" max=\"30\" step=\"1\" type=\"number\" placeholder=\"Margin\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-checkbox [(ngModel)]=\"options.outerMargin\" (ngModelChange)=\"changedOptions()\">Outer Margin</mat-checkbox>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.mobileBreakpoint\" type=\"number\" placeholder=\"Mobile Breakpoint\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.fixedColWidth\" type=\"number\" placeholder=\"Fixed Col Width\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <mat-form-field>\n    <input matInput [(ngModel)]=\"options.fixedRowHeight\" type=\"number\" placeholder=\"Fixed Row Height\"\n           (ngModelChange)=\"changedOptions()\">\n  </mat-form-field>\n  <button mat-mini-fab (click)=\"addItem()\" class=\"add-button cols-2\">\n    <mat-icon>add</mat-icon>\n  </button>\n</div>\n\n<gridster [options]=\"options\">\n  <gridster-item [item]=\"item\" *ngFor=\"let item of dashboard\">\n    <div class=\"button-holder\">\n      <div class=\"gridster-item-content\" *ngIf=\"item.hasContent\">\n        <div class=\"stuff\">\n          <span>Some content to select and click without dragging the widget</span>\n          <a href=\"https://www.google.com\" target=\"_blank\">Link to Google</a>\n        </div>\n      </div>\n      <div class=\"item-buttons\" *ngIf=\"item.hasContent\">\n        <button mat-icon-button mat-raised-button class=\"drag-handler\">\n          <mat-icon>open_with</mat-icon>\n        </button>\n        <button mat-icon-button mat-raised-button class=\"remove-button\" (mousedown)=\"removeItem($event, item)\"\n                (touchstart)=\"removeItem($event, item)\">\n          <mat-icon>delete</mat-icon>\n        </button>\n      </div>\n      <label *ngIf=\"!item.hasContent\">{{item.label}}</label>\n      <button mat-mini-fab *ngIf=\"!item.hasContent\" (mousedown)=\"removeItem($event, item)\"\n              (touchstart)=\"removeItem($event, item)\">\n        <mat-icon>delete</mat-icon>\n      </button>\n    </div>\n  </gridster-item>\n</gridster>\n","import {ChangeDetectionStrategy, Component, OnInit, ViewEncapsulation} from '@angular/core';\n\nimport {DisplayGrid, GridsterConfig, GridsterItem, GridType} from 'angular-gridster2';\n\n@Component({\n  selector: 'app-swap',\n  templateUrl: './swap.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None\n})\nexport class SwapComponent implements OnInit {\n  options: GridsterConfig;\n  dashboard: Array<GridsterItem>;\n\n  ngOnInit() {\n    this.options = {\n      gridType: GridType.Fit,\n      displayGrid: DisplayGrid.Always,\n      pushItems: false,\n      swap: true,\n      swapWhileDragging: false,\n      draggable: {\n        enabled: true\n      },\n      resizable: {\n        enabled: true\n      }\n    };\n\n    this.dashboard = [\n      {cols: 2, rows: 1, y: 0, x: 0},\n      {cols: 2, rows: 2, y: 0, x: 2},\n      {cols: 1, rows: 1, y: 0, x: 4},\n      {cols: 3, rows: 2, y: 1, x: 4},\n      {cols: 1, rows: 1, y: 4, x: 5},\n      {cols: 1, rows: 1, y: 2, x: 1},\n      {cols: 2, rows: 2, y: 5, x: 5},\n      {cols: 2, rows: 2, y: 3, x: 2},\n      {cols: 2, rows: 1, y: 2, x: 2},\n      {cols: 1, rows: 1, y: 3, x: 4},\n      {cols: 1, rows: 1, y: 0, x: 6}\n    ];\n  }\n\n  changedOptions() {\n    if (this.options.api && this.options.api.optionsChanged) {\n      this.options.api.optionsChanged();\n    }\n  }\n\n  removeItem($event, item) {\n    $event.preventDefault();\n    $event.stopPropagation();\n    this.dashboard.splice(this.dashboard.indexOf(item), 1);\n  }\n\n  addItem() {\n    this.dashboard.push({x: 0, y: 0, cols: 1, rows: 1});\n  }\n}\n","<div class=\"options\">\n  <a mat-raised-button href=\"https://github.com/tiberiuzuld/angular-gridster2/tree/master/src/app/sections/swap\"\n     target=\"_blank\" class=\"source-code-button\">\n    <mat-icon>open_in_new</mat-icon>\n    Source\n  </a>\n  <markdown [src]=\"'assets/swap.md'\"></markdown>\n</div>\n<div class=\"options-header\">\n  <mat-checkbox [(ngModel)]=\"options.swap\" (ngModelChange)=\"changedOptions()\">\n    Swap Items\n  </mat-checkbox>\n  <mat-checkbox [(ngModel)]=\"options.swapWhileDragging\" (ngModelChange)=\"changedOptions()\">\n    Swap Items While Dragging\n  </mat-checkbox>\n  <button mat-mini-fab (click)=\"addItem()\" class=\"add-button cols-2\">\n    <mat-icon>add</mat-icon>\n  </button>\n</div>\n\n\n<gridster [options]=\"options\">\n  <gridster-item [item]=\"item\" *ngFor=\"let item of dashboard\">\n    <div class=\"button-holder\">\n      <button mat-mini-fab (mousedown)=\"removeItem($event, item)\"\n              (touchstart)=\"removeItem($event, item)\">\n        <mat-icon>delete</mat-icon>\n      </button>\n    </div>\n  </gridster-item>\n</gridster>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import {enableProdMode} from '@angular/core';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\nimport {AppModule} from './app/app.module';\nimport {environment} from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":"webpack:///"}